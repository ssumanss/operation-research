{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to operation research course \u00b6 This page is dedicated to the course of operaton research taught at the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur. Syllabus \u00b6 Simplex Algorithm, Big-M, Two Phase Method Dual Simplex and other algorithm Transportation and Assignment Problems Game Theory Deterministic and Probabilistic Dynamic Programming Nonlinear Programming KKT Conditions Objectives \u00b6 The course Operation Research focussed on the study of different kinds of optimization methods. First two unit is realted to linear programming and simplex method. Simplex Algorithm Big-M Two Phase Dual Simplex Algorithm Transportation Problem Assignment Problem Game Theory Dynamic Programming Two Persion Zero Sum Game Graphical Solution Game as LPP Nonlinear Programming KKT Conditions References \u00b6 Operation Research by Hamady A. Taha Routine \u00b6 Weekday 1 st Period 2 nd Period 3 rd Period 4 th Period 5 th Period MON CA TUE CA WED CA THR CA FRI CA SAT CA Instructor \u00b6 Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"Home"},{"location":"#welcome-to-operation-research-course","text":"This page is dedicated to the course of operaton research taught at the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur.","title":"Welcome to operation research course"},{"location":"#syllabus","text":"Simplex Algorithm, Big-M, Two Phase Method Dual Simplex and other algorithm Transportation and Assignment Problems Game Theory Deterministic and Probabilistic Dynamic Programming Nonlinear Programming KKT Conditions","title":"Syllabus"},{"location":"#objectives","text":"The course Operation Research focussed on the study of different kinds of optimization methods. First two unit is realted to linear programming and simplex method. Simplex Algorithm Big-M Two Phase Dual Simplex Algorithm Transportation Problem Assignment Problem Game Theory Dynamic Programming Two Persion Zero Sum Game Graphical Solution Game as LPP Nonlinear Programming KKT Conditions","title":"Objectives"},{"location":"#references","text":"Operation Research by Hamady A. Taha","title":"References"},{"location":"#routine","text":"Weekday 1 st Period 2 nd Period 3 rd Period 4 th Period 5 th Period MON CA TUE CA WED CA THR CA FRI CA SAT CA","title":"Routine"},{"location":"#instructor","text":"Sandeep Suman , Assistant Professor, TMBU, Bhagalpur","title":"Instructor"},{"location":"assignments/","text":"Assignments \u00b6 As a part of continuous assessment you have to submit the assignment S. No. Donwload Link Due Date 1 Download 15/05/2019 2 3 4 5","title":"Assignments"},{"location":"assignments/#assignments","text":"As a part of continuous assessment you have to submit the assignment S. No. Donwload Link Due Date 1 Download 15/05/2019 2 3 4 5","title":"Assignments"},{"location":"exam/","text":"Exams \u00b6 The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assessment that belongs to attendance, seminar and assignments. Practice the following question for exams Internal Exam \u00b6 Internal exam consist of 5 objectives and 3 descriptive questions, out of which you have to answer all objectives and 2 descriptive questions. Final Exam \u00b6 Final exam divided in three groups. The questions are organized in three groups as follows: Group Questions Marks Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Exam"},{"location":"exam/#exams","text":"The course has two exams one is internal of 15 marks, while the other is final worth 70 marks. Rest marks are part of continuous assessment that belongs to attendance, seminar and assignments. Practice the following question for exams","title":"Exams"},{"location":"exam/#internal-exam","text":"Internal exam consist of 5 objectives and 3 descriptive questions, out of which you have to answer all objectives and 2 descriptive questions.","title":"Internal Exam"},{"location":"exam/#final-exam","text":"Final exam divided in three groups. The questions are organized in three groups as follows: Group Questions Marks Total A 10/10 2 20 B 04/05 5 20 C 03/05 10 30","title":"Final Exam"},{"location":"simplex/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); from IPython.display import display , Markdown , Math import sympy as sp import numpy as np sp . init_printing () Standard Problem \u00b6 Solve the following optimization problem \\begin{alignat*}{2} & \\text{maximize: } && c^Tx \\\\ & \\text{subject to: } && \\begin{aligned}[t] Ax &\\leq b\\\\ x &\\geq 0 \\end{aligned} \\end{alignat*} Problem 1 \u00b6 \\begin{alignat*}{2} & \\text{maximize: } && z = 2x + 3y\\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 3y &\\leq 12 \\\\ 3x + 2y &\\leq 12 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} # important functions def create_table ( T , basic ): # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$| \\n \" return display ( Markdown ( table )) def ratio_analysis ( T , basic , y ): entering_var = y entering_index = var . index ( entering_var ) # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$|$\" \\ + sp . latex ( T . row ( i )[ - 1 ] / T . row ( i )[ entering_index ]) \\ + \"$| \\n \" return display ( Markdown ( table )) def pivoting ( T , basic , entering_var , leaving_var ): entering_index = var . index ( entering_var ) leaving_index = basic . index ( leaving_var ) new_basic = basic . copy () new_basic [ leaving_index ] = entering_var no_rows = len ( basic ) T = T . elementary_row_op ( 'n->kn' , \\ row1 = leaving_index , \\ k = 1 / T [ leaving_index , entering_index ]) for i in range ( no_rows ): if i is not leaving_index : T = T . elementary_row_op ( 'n->n+km' , \\ row1 = i , \\ row2 = leaving_index , \\ k =- T [ i , entering_index ]) return ( T , new_basic ) Step I \u00b6 Fromulating the problem and creating the first table for simplex algorithm. # problem description using matrix c, b and A A = sp . Matrix ([[ 1 , 3 ], [ 3 , 2 ]]); c = sp . Matrix ([ - 2 , - 3 ]) b = sp . Matrix ([ 0 , 12 , 12 ]) # creating necessay data T1 = A . col_insert ( 2 , sp . eye ( 2 )) . row_insert ( 0 , c . row_insert ( 2 , sp . zeros ( 2 , 1 )) . T ) . col_insert ( 4 , b ) x , y , z = sp . symbols ( \"x y z\" ) s1 , s2 = sp . symbols ( \"s_1 s_2\" ) var = [ x , y , s1 , s2 ] basic1 = [ z , s1 , s2 ] create_table ( T1 , basic1 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-2$ $-3$ $0$ $0$ $0$ $s_{1}$ $1$ $3$ $1$ $0$ $12$ $s_{2}$ $3$ $2$ $0$ $1$ $12$ Step II \u00b6 We have to choose an entering variable which will increase the value of objective. So we choose any variable with negative coefficient. Here we choose y . ratio_analysis ( T1 , basic1 , y ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-2$ $-3$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $3$ $1$ $0$ $12$ $4$ $s_{2}$ $3$ $2$ $0$ $1$ $12$ $6$ Step III \u00b6 We have to choose a leaving variable based on ratio analysis. Here we choose the variable with least positive ratio. In this table s_1 has the least positive ratio, so it will leave. Now we have to perform the pivoting step. T2 , basic2 = pivoting ( T1 , basic1 , y , s1 ) Step IV \u00b6 After pivoting we get a new table. Where we can repreat the above steps again and again till the simplex algorithm terminate. In ideal case we get no entering varable. create_table ( T2 , basic2 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-1$ $0$ $1$ $0$ $12$ $y$ $\\frac{1}{3}$ $1$ $\\frac{1}{3}$ $0$ $4$ $s_{2}$ $\\frac{7}{3}$ $0$ $- \\frac{2}{3}$ $1$ $4$ ratio_analysis ( T2 , basic2 , x ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-1$ $0$ $1$ $0$ $12$ $-12$ $y$ $\\frac{1}{3}$ $1$ $\\frac{1}{3}$ $0$ $4$ $12$ $s_{2}$ $\\frac{7}{3}$ $0$ $- \\frac{2}{3}$ $1$ $4$ $\\frac{12}{7}$ T3 , basic3 = pivoting ( T2 , basic2 , x , s2 ) create_table ( T3 , basic3 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $0$ $0$ $\\frac{5}{7}$ $\\frac{3}{7}$ $\\frac{96}{7}$ $y$ $0$ $1$ $\\frac{3}{7}$ $- \\frac{1}{7}$ $\\frac{24}{7}$ $x$ $1$ $0$ $- \\frac{2}{7}$ $\\frac{3}{7}$ $\\frac{12}{7}$ Finally we got a table with all non-negaitve coefficient corresponding to z variable. The solution of this problem is 96/7 at the point (12/7, 24/7) Problem 2 \u00b6 Solve the following optimization problem. \\begin{alignat*}{2} & \\text{maximize: } && z = 2x_1 + x_2 - 3x_3 + 5x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 + 2x_2 + 2x_3 + 4x_4 &\\leq 40 \\\\ 2x_1 - x_2 + x_3 + 2x_4 &\\leq 8 \\\\ 4x_1 - 2x_2 + x_3 - x_4 &\\leq 10 \\\\ x_1, x_2, x_3, x_4 &\\geq 0 \\end{aligned} \\end{alignat*} # problem description using matrix c, b and A A = sp . Matrix ([ [ 1 , 2 , 2 , 4 ], \\ [ 2 , - 1 , 1 , 2 ], \\ [ 4 , - 2 , 1 , - 1 ] ]); c = sp . Matrix ([ 2 , 1 , - 3 , 5 ]) b = sp . Matrix ([ 40 , 8 , 10 ]) # creating necessay data no_eq , no_var = A . shape T1 = A . col_insert ( no_var , sp . eye ( no_eq )) \\ . col_insert ( no_var + no_eq , b ) \\ . row_insert ( 0 , - c . row_insert ( no_var , sp . zeros ( no_eq + 1 , 1 )) . T ) \\ T1 $$\\left[\\begin{matrix}-2 & -1 & 3 & -5 & 0 & 0 & 0 & 0\\\\1 & 2 & 2 & 4 & 1 & 0 & 0 & 40\\\\2 & -1 & 1 & 2 & 0 & 1 & 0 & 8\\\\4 & -2 & 1 & -1 & 0 & 0 & 1 & 10\\end{matrix}\\right]$$ x1 , x2 , x3 , x4 = sp . symbols ( \"x1:5\" ) s1 , s2 , s3 = sp . symbols ( \"s1:4\" ) z = sp . symbols ( \"z\" ) var = [ x1 , x2 , x3 , x4 , s1 , s2 , s3 ] basic1 = [ z , s1 , s2 , s3 ] create_table ( T1 , basic1 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $-2$ $-1$ $3$ $-5$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $2$ $2$ $4$ $1$ $0$ $0$ $40$ $s_{2}$ $2$ $-1$ $1$ $2$ $0$ $1$ $0$ $8$ $s_{3}$ $4$ $-2$ $1$ $-1$ $0$ $0$ $1$ $10$ ratio_analysis ( T1 , basic1 , x4 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $-2$ $-1$ $3$ $-5$ $0$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $2$ $2$ $4$ $1$ $0$ $0$ $40$ $10$ $s_{2}$ $2$ $-1$ $1$ $2$ $0$ $1$ $0$ $8$ $4$ $s_{3}$ $4$ $-2$ $1$ $-1$ $0$ $0$ $1$ $10$ $-10$ T2 , basic2 = pivoting ( T1 , basic1 , x4 , s2 ) create_table ( T2 , basic2 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $3$ $- \\frac{7}{2}$ $\\frac{11}{2}$ $0$ $0$ $\\frac{5}{2}$ $0$ $20$ $s_{1}$ $-3$ $4$ $0$ $0$ $1$ $-2$ $0$ $24$ $x_{4}$ $1$ $- \\frac{1}{2}$ $\\frac{1}{2}$ $1$ $0$ $\\frac{1}{2}$ $0$ $4$ $s_{3}$ $5$ $- \\frac{5}{2}$ $\\frac{3}{2}$ $0$ $0$ $\\frac{1}{2}$ $1$ $14$ ratio_analysis ( T2 , basic2 , x2 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $3$ $- \\frac{7}{2}$ $\\frac{11}{2}$ $0$ $0$ $\\frac{5}{2}$ $0$ $20$ $- \\frac{40}{7}$ $s_{1}$ $-3$ $4$ $0$ $0$ $1$ $-2$ $0$ $24$ $6$ $x_{4}$ $1$ $- \\frac{1}{2}$ $\\frac{1}{2}$ $1$ $0$ $\\frac{1}{2}$ $0$ $4$ $-8$ $s_{3}$ $5$ $- \\frac{5}{2}$ $\\frac{3}{2}$ $0$ $0$ $\\frac{1}{2}$ $1$ $14$ $- \\frac{28}{5}$ T3 , basic3 = pivoting ( T2 , basic2 , x2 , s1 ) create_table ( T3 , basic3 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $\\frac{3}{8}$ $0$ $\\frac{11}{2}$ $0$ $\\frac{7}{8}$ $\\frac{3}{4}$ $0$ $41$ $x_{2}$ $- \\frac{3}{4}$ $1$ $0$ $0$ $\\frac{1}{4}$ $- \\frac{1}{2}$ $0$ $6$ $x_{4}$ $\\frac{5}{8}$ $0$ $\\frac{1}{2}$ $1$ $\\frac{1}{8}$ $\\frac{1}{4}$ $0$ $7$ $s_{3}$ $\\frac{25}{8}$ $0$ $\\frac{3}{2}$ $0$ $\\frac{5}{8}$ $- \\frac{3}{4}$ $1$ $29$","title":"Simplex"},{"location":"simplex/#standard-problem","text":"Solve the following optimization problem \\begin{alignat*}{2} & \\text{maximize: } && c^Tx \\\\ & \\text{subject to: } && \\begin{aligned}[t] Ax &\\leq b\\\\ x &\\geq 0 \\end{aligned} \\end{alignat*}","title":"Standard Problem"},{"location":"simplex/#problem-1","text":"\\begin{alignat*}{2} & \\text{maximize: } && z = 2x + 3y\\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 3y &\\leq 12 \\\\ 3x + 2y &\\leq 12 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} # important functions def create_table ( T , basic ): # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$| \\n \" return display ( Markdown ( table )) def ratio_analysis ( T , basic , y ): entering_var = y entering_index = var . index ( entering_var ) # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$|$\" \\ + sp . latex ( T . row ( i )[ - 1 ] / T . row ( i )[ entering_index ]) \\ + \"$| \\n \" return display ( Markdown ( table )) def pivoting ( T , basic , entering_var , leaving_var ): entering_index = var . index ( entering_var ) leaving_index = basic . index ( leaving_var ) new_basic = basic . copy () new_basic [ leaving_index ] = entering_var no_rows = len ( basic ) T = T . elementary_row_op ( 'n->kn' , \\ row1 = leaving_index , \\ k = 1 / T [ leaving_index , entering_index ]) for i in range ( no_rows ): if i is not leaving_index : T = T . elementary_row_op ( 'n->n+km' , \\ row1 = i , \\ row2 = leaving_index , \\ k =- T [ i , entering_index ]) return ( T , new_basic )","title":"Problem 1"},{"location":"simplex/#step-i","text":"Fromulating the problem and creating the first table for simplex algorithm. # problem description using matrix c, b and A A = sp . Matrix ([[ 1 , 3 ], [ 3 , 2 ]]); c = sp . Matrix ([ - 2 , - 3 ]) b = sp . Matrix ([ 0 , 12 , 12 ]) # creating necessay data T1 = A . col_insert ( 2 , sp . eye ( 2 )) . row_insert ( 0 , c . row_insert ( 2 , sp . zeros ( 2 , 1 )) . T ) . col_insert ( 4 , b ) x , y , z = sp . symbols ( \"x y z\" ) s1 , s2 = sp . symbols ( \"s_1 s_2\" ) var = [ x , y , s1 , s2 ] basic1 = [ z , s1 , s2 ] create_table ( T1 , basic1 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-2$ $-3$ $0$ $0$ $0$ $s_{1}$ $1$ $3$ $1$ $0$ $12$ $s_{2}$ $3$ $2$ $0$ $1$ $12$","title":"Step I"},{"location":"simplex/#step-ii","text":"We have to choose an entering variable which will increase the value of objective. So we choose any variable with negative coefficient. Here we choose y . ratio_analysis ( T1 , basic1 , y ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-2$ $-3$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $3$ $1$ $0$ $12$ $4$ $s_{2}$ $3$ $2$ $0$ $1$ $12$ $6$","title":"Step II"},{"location":"simplex/#step-iii","text":"We have to choose a leaving variable based on ratio analysis. Here we choose the variable with least positive ratio. In this table s_1 has the least positive ratio, so it will leave. Now we have to perform the pivoting step. T2 , basic2 = pivoting ( T1 , basic1 , y , s1 )","title":"Step III"},{"location":"simplex/#step-iv","text":"After pivoting we get a new table. Where we can repreat the above steps again and again till the simplex algorithm terminate. In ideal case we get no entering varable. create_table ( T2 , basic2 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-1$ $0$ $1$ $0$ $12$ $y$ $\\frac{1}{3}$ $1$ $\\frac{1}{3}$ $0$ $4$ $s_{2}$ $\\frac{7}{3}$ $0$ $- \\frac{2}{3}$ $1$ $4$ ratio_analysis ( T2 , basic2 , x ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-1$ $0$ $1$ $0$ $12$ $-12$ $y$ $\\frac{1}{3}$ $1$ $\\frac{1}{3}$ $0$ $4$ $12$ $s_{2}$ $\\frac{7}{3}$ $0$ $- \\frac{2}{3}$ $1$ $4$ $\\frac{12}{7}$ T3 , basic3 = pivoting ( T2 , basic2 , x , s2 ) create_table ( T3 , basic3 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $0$ $0$ $\\frac{5}{7}$ $\\frac{3}{7}$ $\\frac{96}{7}$ $y$ $0$ $1$ $\\frac{3}{7}$ $- \\frac{1}{7}$ $\\frac{24}{7}$ $x$ $1$ $0$ $- \\frac{2}{7}$ $\\frac{3}{7}$ $\\frac{12}{7}$ Finally we got a table with all non-negaitve coefficient corresponding to z variable. The solution of this problem is 96/7 at the point (12/7, 24/7)","title":"Step IV"},{"location":"simplex/#problem-2","text":"Solve the following optimization problem. \\begin{alignat*}{2} & \\text{maximize: } && z = 2x_1 + x_2 - 3x_3 + 5x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 + 2x_2 + 2x_3 + 4x_4 &\\leq 40 \\\\ 2x_1 - x_2 + x_3 + 2x_4 &\\leq 8 \\\\ 4x_1 - 2x_2 + x_3 - x_4 &\\leq 10 \\\\ x_1, x_2, x_3, x_4 &\\geq 0 \\end{aligned} \\end{alignat*} # problem description using matrix c, b and A A = sp . Matrix ([ [ 1 , 2 , 2 , 4 ], \\ [ 2 , - 1 , 1 , 2 ], \\ [ 4 , - 2 , 1 , - 1 ] ]); c = sp . Matrix ([ 2 , 1 , - 3 , 5 ]) b = sp . Matrix ([ 40 , 8 , 10 ]) # creating necessay data no_eq , no_var = A . shape T1 = A . col_insert ( no_var , sp . eye ( no_eq )) \\ . col_insert ( no_var + no_eq , b ) \\ . row_insert ( 0 , - c . row_insert ( no_var , sp . zeros ( no_eq + 1 , 1 )) . T ) \\ T1 $$\\left[\\begin{matrix}-2 & -1 & 3 & -5 & 0 & 0 & 0 & 0\\\\1 & 2 & 2 & 4 & 1 & 0 & 0 & 40\\\\2 & -1 & 1 & 2 & 0 & 1 & 0 & 8\\\\4 & -2 & 1 & -1 & 0 & 0 & 1 & 10\\end{matrix}\\right]$$ x1 , x2 , x3 , x4 = sp . symbols ( \"x1:5\" ) s1 , s2 , s3 = sp . symbols ( \"s1:4\" ) z = sp . symbols ( \"z\" ) var = [ x1 , x2 , x3 , x4 , s1 , s2 , s3 ] basic1 = [ z , s1 , s2 , s3 ] create_table ( T1 , basic1 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $-2$ $-1$ $3$ $-5$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $2$ $2$ $4$ $1$ $0$ $0$ $40$ $s_{2}$ $2$ $-1$ $1$ $2$ $0$ $1$ $0$ $8$ $s_{3}$ $4$ $-2$ $1$ $-1$ $0$ $0$ $1$ $10$ ratio_analysis ( T1 , basic1 , x4 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $-2$ $-1$ $3$ $-5$ $0$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $2$ $2$ $4$ $1$ $0$ $0$ $40$ $10$ $s_{2}$ $2$ $-1$ $1$ $2$ $0$ $1$ $0$ $8$ $4$ $s_{3}$ $4$ $-2$ $1$ $-1$ $0$ $0$ $1$ $10$ $-10$ T2 , basic2 = pivoting ( T1 , basic1 , x4 , s2 ) create_table ( T2 , basic2 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $3$ $- \\frac{7}{2}$ $\\frac{11}{2}$ $0$ $0$ $\\frac{5}{2}$ $0$ $20$ $s_{1}$ $-3$ $4$ $0$ $0$ $1$ $-2$ $0$ $24$ $x_{4}$ $1$ $- \\frac{1}{2}$ $\\frac{1}{2}$ $1$ $0$ $\\frac{1}{2}$ $0$ $4$ $s_{3}$ $5$ $- \\frac{5}{2}$ $\\frac{3}{2}$ $0$ $0$ $\\frac{1}{2}$ $1$ $14$ ratio_analysis ( T2 , basic2 , x2 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $3$ $- \\frac{7}{2}$ $\\frac{11}{2}$ $0$ $0$ $\\frac{5}{2}$ $0$ $20$ $- \\frac{40}{7}$ $s_{1}$ $-3$ $4$ $0$ $0$ $1$ $-2$ $0$ $24$ $6$ $x_{4}$ $1$ $- \\frac{1}{2}$ $\\frac{1}{2}$ $1$ $0$ $\\frac{1}{2}$ $0$ $4$ $-8$ $s_{3}$ $5$ $- \\frac{5}{2}$ $\\frac{3}{2}$ $0$ $0$ $\\frac{1}{2}$ $1$ $14$ $- \\frac{28}{5}$ T3 , basic3 = pivoting ( T2 , basic2 , x2 , s1 ) create_table ( T3 , basic3 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $\\frac{3}{8}$ $0$ $\\frac{11}{2}$ $0$ $\\frac{7}{8}$ $\\frac{3}{4}$ $0$ $41$ $x_{2}$ $- \\frac{3}{4}$ $1$ $0$ $0$ $\\frac{1}{4}$ $- \\frac{1}{2}$ $0$ $6$ $x_{4}$ $\\frac{5}{8}$ $0$ $\\frac{1}{2}$ $1$ $\\frac{1}{8}$ $\\frac{1}{4}$ $0$ $7$ $s_{3}$ $\\frac{25}{8}$ $0$ $\\frac{3}{2}$ $0$ $\\frac{5}{8}$ $- \\frac{3}{4}$ $1$ $29$","title":"Problem 2"},{"location":"game-theory/basic-definitions/","text":"Basic Defintions of Game Theory \u00b6 Checkpoint #1: Which of the following situations can be modelled as a game Two student trying to solve an assignment as soon as possible Five students trying to solve their assignment in minimum time A number of students competing for rank 1 None of These Checkpoint #2: Which of the following is not true for a two person zero sum game Sum of their payoff is zero Two teams are playing cricket for fixed amount of money Both players can get non-negative payoff None of these","title":"Definitions"},{"location":"game-theory/basic-definitions/#basic-defintions-of-game-theory","text":"Checkpoint #1: Which of the following situations can be modelled as a game Two student trying to solve an assignment as soon as possible Five students trying to solve their assignment in minimum time A number of students competing for rank 1 None of These Checkpoint #2: Which of the following is not true for a two person zero sum game Sum of their payoff is zero Two teams are playing cricket for fixed amount of money Both players can get non-negative payoff None of these","title":"Basic Defintions of Game Theory"},{"location":"game-theory/dominant-strategy/","text":"Dominant Strategy \u00b6 Checkpoint #1: Which is true for dominant strategy Every game has a dominant strategy If a game has dominant strategy, then the size of game will reduced If a game has dominant strategy for player A, then the only strategy player A will use is the dominant strategy None of these","title":"Dominant Strategy"},{"location":"game-theory/dominant-strategy/#dominant-strategy","text":"Checkpoint #1: Which is true for dominant strategy Every game has a dominant strategy If a game has dominant strategy, then the size of game will reduced If a game has dominant strategy for player A, then the only strategy player A will use is the dominant strategy None of these","title":"Dominant Strategy"},{"location":"game-theory/introduction/","text":"Introduction \u00b6 In this part of this course we will learn some game theory. Game theory is used to model conflicting situation in social and economic activity. In this course we will basically learn a special type of game that is called two person zero sum game .","title":"Introduction"},{"location":"game-theory/introduction/#introduction","text":"In this part of this course we will learn some game theory. Game theory is used to model conflicting situation in social and economic activity. In this course we will basically learn a special type of game that is called two person zero sum game .","title":"Introduction"},{"location":"game-theory/maximin-strategy/","text":"Maximin and Minimax Strategy \u00b6 Checkpoint #1: Which is not true for maximin strategy? In is based on pessimistic thinking, i.e. , thinking about the least risk. If the payoff matrix is given for player A , the maximin strategy is used by player A . If the payoff matrix is given for player A , the maximin strategy is used by player B . Maximin and minimax strategy are based on the same approach by player A and B respectively. Checkpoint #2: If the payoff matrix is given for player A , then which of the following is true for maximin strategy? It gives a lower bount for the game. It gives a upper bound for the game. The maximin strategy is used by player B . None of these.","title":"Maximin Strategy"},{"location":"game-theory/maximin-strategy/#maximin-and-minimax-strategy","text":"Checkpoint #1: Which is not true for maximin strategy? In is based on pessimistic thinking, i.e. , thinking about the least risk. If the payoff matrix is given for player A , the maximin strategy is used by player A . If the payoff matrix is given for player A , the maximin strategy is used by player B . Maximin and minimax strategy are based on the same approach by player A and B respectively. Checkpoint #2: If the payoff matrix is given for player A , then which of the following is true for maximin strategy? It gives a lower bount for the game. It gives a upper bound for the game. The maximin strategy is used by player B . None of these.","title":"Maximin and Minimax Strategy"},{"location":"linear-programming/bigm/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); from IPython.display import display , Markdown , Math import sympy as sp import numpy as np sp . init_printing () Solve the following optimization problem \\begin{alignat*}{2} & \\text{maximize: } && c^Tx \\\\ & \\text{subject to: } && \\begin{aligned}[t] Ax &\\leq b\\\\ Cx &\\geq d \\\\ Ex &= f \\\\ x &\\geq 0 \\end{aligned} \\end{alignat*} The presence of \\geq and = in the constraint set, make the initial table of the simplex infeasible. This is overcome by introducing exatra variable called artificial variable . Concrete Problem \u00b6 \\begin{alignat*}{2} & \\text{maximize: } && z = 4x+y \\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 2y &\\leq 4 \\\\ 4x + 3y &\\geq 6 \\\\ 3x + y &= 3 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} def create_table ( T , basic ): # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$| \\n \" return display ( Markdown ( table )) def ratio_analysis ( T , basic , y ): entering_var = y entering_index = var . index ( entering_var ) # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$|$\" \\ + sp . latex ( T . row ( i )[ - 1 ] / T . row ( i )[ entering_index ]) \\ + \"$| \\n \" return display ( Markdown ( table )) def pivoting ( T , basic , entering_var , leaving_var ): entering_index = var . index ( entering_var ) leaving_index = basic . index ( leaving_var ) new_basic = basic . copy () new_basic [ leaving_index ] = entering_var no_rows = len ( basic ) T = T . elementary_row_op ( 'n->kn' , \\ row1 = leaving_index , \\ k = 1 / T [ leaving_index , entering_index ]) for i in range ( no_rows ): if i is not leaving_index : T = T . elementary_row_op ( 'n->n+km' , \\ row1 = i , \\ row2 = leaving_index , \\ k =- T [ i , entering_index ]) return ( T , new_basic ) def consistent ( T , no_artificial_var ): no_artficial_var = 2 no_row , no_col = T . shape for i in range ( no_artficial_var ): T = T . elementary_row_op ( 'n->n+km' , \\ row1 = 0 , \\ row2 = ( no_row - no_artficial_var + i ), \\ k =- T [ 0 , no_col - no_artficial_var - 1 + i ]) return T # problem description using matrix c, b and A c = sp . Matrix ([ 4 , 1 ]) A = sp . Matrix ([ [ 1 , 2 ] ]); b = sp . Matrix ([ 4 ]) C = sp . Matrix ([ [ 4 , 3 ] ]); d = sp . Matrix ([ 6 ]) E = sp . Matrix ([ [ 3 , 1 ] ]); f = sp . Matrix ([ 3 ]) # T1 = A.col_insert(no_var, sp.eye(no_eq))\\ # .col_insert(no_var + no_eq, b) \\ # .row_insert(0, -c.row_insert(no_var, sp.zeros(no_eq + 1,1)).T) M = 100 T0 = - c . col_join ( sp . zeros ( A . shape [ 0 ] + C . shape [ 0 ], 1 )) \\ . col_join ( M * sp . ones ( C . shape [ 0 ] + E . shape [ 0 ], 1 )) \\ . col_join ( sp . zeros ( 1 , 1 )) . T T1 = A . row_join ( sp . eye ( A . shape [ 0 ])) \\ . row_join ( sp . zeros ( A . shape [ 0 ], 2 * C . shape [ 0 ] + E . shape [ 0 ])) \\ . row_join ( b ) T2 = C . row_join ( sp . zeros ( C . shape [ 0 ], A . shape [ 0 ])) \\ . row_join ( - sp . eye ( C . shape [ 0 ])) \\ . row_join ( sp . eye ( C . shape [ 0 ])) \\ . row_join ( sp . zeros ( C . shape [ 0 ], E . shape [ 0 ])) \\ . row_join ( d ) T3 = E . row_join ( sp . zeros ( E . shape [ 0 ], A . shape [ 0 ] + 2 * C . shape [ 0 ])) \\ . row_join ( sp . eye ( E . shape [ 0 ])) \\ . row_join ( f ) T = T0 . col_join ( T1 ) . col_join ( T2 ) . col_join ( T3 ) T $\\displaystyle \\left[\\begin{matrix}-4 & -1 & 0 & 0 & -100 & -100 & 0\\\\1 & 2 & 1 & 0 & 0 & 0 & 4\\\\4 & 3 & 0 & -1 & 1 & 0 & 6\\\\3 & 1 & 0 & 0 & 0 & 1 & 3\\end{matrix}\\right]$ x , y = sp . symbols ( \"x y\" ) s1 , s2 = sp . symbols ( \"s1:3\" ) R1 , R2 = sp . symbols ( \"R1:3\" ) z = sp . symbols ( \"z\" ) var = [ x , y , s1 , s2 , R1 , R2 ] basic = [ z , s1 , R1 , R2 ] create_table ( T , basic ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $-4$ $-1$ $0$ $0$ $-100$ $-100$ $0$ $s_{1}$ $1$ $2$ $1$ $0$ $0$ $0$ $4$ $R_{1}$ $4$ $3$ $0$ $-1$ $1$ $0$ $6$ $R_{2}$ $3$ $1$ $0$ $0$ $0$ $1$ $3$ T1 = consistent ( T , 2 ) create_table ( T1 , basic ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $696$ $399$ $0$ $-100$ $0$ $0$ $900$ $s_{1}$ $1$ $2$ $1$ $0$ $0$ $0$ $4$ $R_{1}$ $4$ $3$ $0$ $-1$ $1$ $0$ $6$ $R_{2}$ $3$ $1$ $0$ $0$ $0$ $1$ $3$ ratio_analysis ( T1 , basic , x ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $696$ $399$ $0$ $-100$ $0$ $0$ $900$ $\\frac{75}{58}$ $s_{1}$ $1$ $2$ $1$ $0$ $0$ $0$ $4$ $4$ $R_{1}$ $4$ $3$ $0$ $-1$ $1$ $0$ $6$ $\\frac{3}{2}$ $R_{2}$ $3$ $1$ $0$ $0$ $0$ $1$ $3$ $1$ T2 , basic2 = pivoting ( T1 , basic , x , R2 ) create_table ( T2 , basic2 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $167$ $0$ $-100$ $0$ $-232$ $204$ $s_{1}$ $0$ $\\frac{5}{3}$ $1$ $0$ $0$ $- \\frac{1}{3}$ $3$ $R_{1}$ $0$ $\\frac{5}{3}$ $0$ $-1$ $1$ $- \\frac{4}{3}$ $2$ $x$ $1$ $\\frac{1}{3}$ $0$ $0$ $0$ $\\frac{1}{3}$ $1$ ratio_analysis ( T2 , basic2 , y ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $167$ $0$ $-100$ $0$ $-232$ $204$ $\\frac{204}{167}$ $s_{1}$ $0$ $\\frac{5}{3}$ $1$ $0$ $0$ $- \\frac{1}{3}$ $3$ $\\frac{9}{5}$ $R_{1}$ $0$ $\\frac{5}{3}$ $0$ $-1$ $1$ $- \\frac{4}{3}$ $2$ $\\frac{6}{5}$ $x$ $1$ $\\frac{1}{3}$ $0$ $0$ $0$ $\\frac{1}{3}$ $1$ $3$ T3 , basic3 = pivoting ( T2 , basic2 , y , R1 ) create_table ( T3 , basic3 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $0$ $0$ $\\frac{1}{5}$ $- \\frac{501}{5}$ $- \\frac{492}{5}$ $\\frac{18}{5}$ $s_{1}$ $0$ $0$ $1$ $1$ $-1$ $1$ $1$ $y$ $0$ $1$ $0$ $- \\frac{3}{5}$ $\\frac{3}{5}$ $- \\frac{4}{5}$ $\\frac{6}{5}$ $x$ $1$ $0$ $0$ $\\frac{1}{5}$ $- \\frac{1}{5}$ $\\frac{3}{5}$ $\\frac{3}{5}$ ratio_analysis ( T3 , basic3 , s2 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $0$ $0$ $\\frac{1}{5}$ $- \\frac{501}{5}$ $- \\frac{492}{5}$ $\\frac{18}{5}$ $18$ $s_{1}$ $0$ $0$ $1$ $1$ $-1$ $1$ $1$ $1$ $y$ $0$ $1$ $0$ $- \\frac{3}{5}$ $\\frac{3}{5}$ $- \\frac{4}{5}$ $\\frac{6}{5}$ $-2$ $x$ $1$ $0$ $0$ $\\frac{1}{5}$ $- \\frac{1}{5}$ $\\frac{3}{5}$ $\\frac{3}{5}$ $3$ T4 , basic4 = pivoting ( T3 , basic3 , s2 , s1 ) create_table ( T4 , basic4 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $0$ $- \\frac{1}{5}$ $0$ $-100$ $- \\frac{493}{5}$ $\\frac{17}{5}$ $s_{2}$ $0$ $0$ $1$ $1$ $-1$ $1$ $1$ $y$ $0$ $1$ $\\frac{3}{5}$ $0$ $0$ $- \\frac{1}{5}$ $\\frac{9}{5}$ $x$ $1$ $0$ $- \\frac{1}{5}$ $0$ $0$ $\\frac{2}{5}$ $\\frac{2}{5}$ Since all the coefficient corresponding to z is non-negative, hence there will be no entering variable. The simplex algorithm will terminate. The objective is \\dfrac{17}{5} at the point \\left(\\dfrac{2}{5}, \\dfrac{9}{5}\\right) .","title":"Big M Method"},{"location":"linear-programming/bigm/#concrete-problem","text":"\\begin{alignat*}{2} & \\text{maximize: } && z = 4x+y \\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 2y &\\leq 4 \\\\ 4x + 3y &\\geq 6 \\\\ 3x + y &= 3 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} def create_table ( T , basic ): # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$| \\n \" return display ( Markdown ( table )) def ratio_analysis ( T , basic , y ): entering_var = y entering_index = var . index ( entering_var ) # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$|$\" \\ + sp . latex ( T . row ( i )[ - 1 ] / T . row ( i )[ entering_index ]) \\ + \"$| \\n \" return display ( Markdown ( table )) def pivoting ( T , basic , entering_var , leaving_var ): entering_index = var . index ( entering_var ) leaving_index = basic . index ( leaving_var ) new_basic = basic . copy () new_basic [ leaving_index ] = entering_var no_rows = len ( basic ) T = T . elementary_row_op ( 'n->kn' , \\ row1 = leaving_index , \\ k = 1 / T [ leaving_index , entering_index ]) for i in range ( no_rows ): if i is not leaving_index : T = T . elementary_row_op ( 'n->n+km' , \\ row1 = i , \\ row2 = leaving_index , \\ k =- T [ i , entering_index ]) return ( T , new_basic ) def consistent ( T , no_artificial_var ): no_artficial_var = 2 no_row , no_col = T . shape for i in range ( no_artficial_var ): T = T . elementary_row_op ( 'n->n+km' , \\ row1 = 0 , \\ row2 = ( no_row - no_artficial_var + i ), \\ k =- T [ 0 , no_col - no_artficial_var - 1 + i ]) return T # problem description using matrix c, b and A c = sp . Matrix ([ 4 , 1 ]) A = sp . Matrix ([ [ 1 , 2 ] ]); b = sp . Matrix ([ 4 ]) C = sp . Matrix ([ [ 4 , 3 ] ]); d = sp . Matrix ([ 6 ]) E = sp . Matrix ([ [ 3 , 1 ] ]); f = sp . Matrix ([ 3 ]) # T1 = A.col_insert(no_var, sp.eye(no_eq))\\ # .col_insert(no_var + no_eq, b) \\ # .row_insert(0, -c.row_insert(no_var, sp.zeros(no_eq + 1,1)).T) M = 100 T0 = - c . col_join ( sp . zeros ( A . shape [ 0 ] + C . shape [ 0 ], 1 )) \\ . col_join ( M * sp . ones ( C . shape [ 0 ] + E . shape [ 0 ], 1 )) \\ . col_join ( sp . zeros ( 1 , 1 )) . T T1 = A . row_join ( sp . eye ( A . shape [ 0 ])) \\ . row_join ( sp . zeros ( A . shape [ 0 ], 2 * C . shape [ 0 ] + E . shape [ 0 ])) \\ . row_join ( b ) T2 = C . row_join ( sp . zeros ( C . shape [ 0 ], A . shape [ 0 ])) \\ . row_join ( - sp . eye ( C . shape [ 0 ])) \\ . row_join ( sp . eye ( C . shape [ 0 ])) \\ . row_join ( sp . zeros ( C . shape [ 0 ], E . shape [ 0 ])) \\ . row_join ( d ) T3 = E . row_join ( sp . zeros ( E . shape [ 0 ], A . shape [ 0 ] + 2 * C . shape [ 0 ])) \\ . row_join ( sp . eye ( E . shape [ 0 ])) \\ . row_join ( f ) T = T0 . col_join ( T1 ) . col_join ( T2 ) . col_join ( T3 ) T $\\displaystyle \\left[\\begin{matrix}-4 & -1 & 0 & 0 & -100 & -100 & 0\\\\1 & 2 & 1 & 0 & 0 & 0 & 4\\\\4 & 3 & 0 & -1 & 1 & 0 & 6\\\\3 & 1 & 0 & 0 & 0 & 1 & 3\\end{matrix}\\right]$ x , y = sp . symbols ( \"x y\" ) s1 , s2 = sp . symbols ( \"s1:3\" ) R1 , R2 = sp . symbols ( \"R1:3\" ) z = sp . symbols ( \"z\" ) var = [ x , y , s1 , s2 , R1 , R2 ] basic = [ z , s1 , R1 , R2 ] create_table ( T , basic ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $-4$ $-1$ $0$ $0$ $-100$ $-100$ $0$ $s_{1}$ $1$ $2$ $1$ $0$ $0$ $0$ $4$ $R_{1}$ $4$ $3$ $0$ $-1$ $1$ $0$ $6$ $R_{2}$ $3$ $1$ $0$ $0$ $0$ $1$ $3$ T1 = consistent ( T , 2 ) create_table ( T1 , basic ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $696$ $399$ $0$ $-100$ $0$ $0$ $900$ $s_{1}$ $1$ $2$ $1$ $0$ $0$ $0$ $4$ $R_{1}$ $4$ $3$ $0$ $-1$ $1$ $0$ $6$ $R_{2}$ $3$ $1$ $0$ $0$ $0$ $1$ $3$ ratio_analysis ( T1 , basic , x ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $696$ $399$ $0$ $-100$ $0$ $0$ $900$ $\\frac{75}{58}$ $s_{1}$ $1$ $2$ $1$ $0$ $0$ $0$ $4$ $4$ $R_{1}$ $4$ $3$ $0$ $-1$ $1$ $0$ $6$ $\\frac{3}{2}$ $R_{2}$ $3$ $1$ $0$ $0$ $0$ $1$ $3$ $1$ T2 , basic2 = pivoting ( T1 , basic , x , R2 ) create_table ( T2 , basic2 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $167$ $0$ $-100$ $0$ $-232$ $204$ $s_{1}$ $0$ $\\frac{5}{3}$ $1$ $0$ $0$ $- \\frac{1}{3}$ $3$ $R_{1}$ $0$ $\\frac{5}{3}$ $0$ $-1$ $1$ $- \\frac{4}{3}$ $2$ $x$ $1$ $\\frac{1}{3}$ $0$ $0$ $0$ $\\frac{1}{3}$ $1$ ratio_analysis ( T2 , basic2 , y ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $167$ $0$ $-100$ $0$ $-232$ $204$ $\\frac{204}{167}$ $s_{1}$ $0$ $\\frac{5}{3}$ $1$ $0$ $0$ $- \\frac{1}{3}$ $3$ $\\frac{9}{5}$ $R_{1}$ $0$ $\\frac{5}{3}$ $0$ $-1$ $1$ $- \\frac{4}{3}$ $2$ $\\frac{6}{5}$ $x$ $1$ $\\frac{1}{3}$ $0$ $0$ $0$ $\\frac{1}{3}$ $1$ $3$ T3 , basic3 = pivoting ( T2 , basic2 , y , R1 ) create_table ( T3 , basic3 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $0$ $0$ $\\frac{1}{5}$ $- \\frac{501}{5}$ $- \\frac{492}{5}$ $\\frac{18}{5}$ $s_{1}$ $0$ $0$ $1$ $1$ $-1$ $1$ $1$ $y$ $0$ $1$ $0$ $- \\frac{3}{5}$ $\\frac{3}{5}$ $- \\frac{4}{5}$ $\\frac{6}{5}$ $x$ $1$ $0$ $0$ $\\frac{1}{5}$ $- \\frac{1}{5}$ $\\frac{3}{5}$ $\\frac{3}{5}$ ratio_analysis ( T3 , basic3 , s2 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $0$ $0$ $\\frac{1}{5}$ $- \\frac{501}{5}$ $- \\frac{492}{5}$ $\\frac{18}{5}$ $18$ $s_{1}$ $0$ $0$ $1$ $1$ $-1$ $1$ $1$ $1$ $y$ $0$ $1$ $0$ $- \\frac{3}{5}$ $\\frac{3}{5}$ $- \\frac{4}{5}$ $\\frac{6}{5}$ $-2$ $x$ $1$ $0$ $0$ $\\frac{1}{5}$ $- \\frac{1}{5}$ $\\frac{3}{5}$ $\\frac{3}{5}$ $3$ T4 , basic4 = pivoting ( T3 , basic3 , s2 , s1 ) create_table ( T4 , basic4 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ $R_{1}$ $R_{2}$ Solution Ratio $z$ $0$ $0$ $- \\frac{1}{5}$ $0$ $-100$ $- \\frac{493}{5}$ $\\frac{17}{5}$ $s_{2}$ $0$ $0$ $1$ $1$ $-1$ $1$ $1$ $y$ $0$ $1$ $\\frac{3}{5}$ $0$ $0$ $- \\frac{1}{5}$ $\\frac{9}{5}$ $x$ $1$ $0$ $- \\frac{1}{5}$ $0$ $0$ $\\frac{2}{5}$ $\\frac{2}{5}$ Since all the coefficient corresponding to z is non-negative, hence there will be no entering variable. The simplex algorithm will terminate. The objective is \\dfrac{17}{5} at the point \\left(\\dfrac{2}{5}, \\dfrac{9}{5}\\right) .","title":"Concrete Problem"},{"location":"linear-programming/scipy/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); from sympy import init_printing from scipy.optimize import linprog from utility import * from IPython.display import Markdown , display , HTML init_printing () The main method to solve linear programming problem in python is given by the following command scipy . optimize . linprog ( c , A_ub = None , b_ub = None , A_eq = None , b_eq = None , bounds = None , method = 'revised simplex' , callback = None , options = None , x0 = None ) Where the value of each argument is given by comparing the linear programming with the following linear programn \\begin{alignat*}{2} & \\text{minimize: } && c^T x \\\\ & \\text{subject to: } && \\begin{aligned}[t] A_{ub}x &\\leq b_{ub} \\\\ A_{eq}x &= b_{eq} \\\\ l\\leq x &\\leq u \\end{aligned} \\end{alignat*} c = [ - 1 , 4 ] A = [[ - 3 , 1 ], [ 1 , 2 ]] b = [ 6 , 4 ] x0_bounds = ( None , None ) x1_bounds = ( - 3 , None ) res = linprog ( c , A_ub = A , b_ub = b , bounds = [ x0_bounds , x1_bounds ], method = 'simplex' ) res con: array([], dtype=float64) fun: -22.0 message: 'Optimization terminated successfully.' nit: 5 slack: array([3.90000000e+01, 1.77635684e-15]) status: 0 success: True x: array([10., -3.]) Example 1.a \u00b6 Now let's try to solve the following problem from the assignment \\begin{alignat*}{2} & \\text{minimize: } && x_1 - 2x_2 - 4x_3 + 2x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 - 2x_3 &\\leq 4 \\\\ x_2 - x_4 &\\leq 8 \\\\ -2x_1 + x_2 + 8x_3 + x_4 &\\leq 12 \\\\ x_1,x_2,x_3,x_4 &\\geq 0 \\end{aligned} \\end{alignat*} We have to use the following command to solve this problem c = [ 1 , - 2 , - 4 , 2 ] A = [[ 1 , 0 , - 2 , 0 ], [ 0 , 1 , 0 , - 1 ], [ - 2 , 1 , 8 , 1 ]] b = [ 4 , 8 , 12 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ); res con: array([], dtype=float64) fun: -18.0 message: 'Optimization terminated successfully.' nit: 3 slack: array([5., 0., 0.]) status: 0 success: True x: array([0. , 8. , 0.5, 0. ]) We can use a small function to extract the important information and print in a line as follows. Markdown ( fancy_output ( res )) The value of optimal is $-18$ at $(0,8,1/2,0)$ Example 1.b \u00b6 We can solve the second assignment \\begin{alignat*}{2} & \\text{minimize: } && 2x-y+2z \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x + y &\\leq 10 \\\\ x+2y-2z &\\leq 20 \\\\ y+2z &\\leq 5 \\\\ x,y,z &\\geq 0 \\end{aligned} \\end{alignat*} c = [ 2 , - 1 , 2 ] A = [[ 2 , 1 , 0 ], [ 1 , 2 , - 2 ], [ 0 , 1 , 2 ]] b = [ 10 , 20 , 5 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res )) The value of optimal is $-5$ at $(0,5,0)$ Example 1.c \u00b6 We can solve the second assignment \\begin{alignat*}{2} & \\text{maximize: } && x_1 + 2x_2 + 2x_3, \\\\ & \\text{subject to: } && \\begin{aligned}[t] 5x_1 + 2x_2 + 3x_3 &\\leq 15 \\\\ x_1 + 4x_2 + 2x_3 &\\leq 12 \\\\ 2x_1 + x_3 &\\leq 8 \\\\ x_1,x_2,x_3 &\\geq 0 \\end{aligned} \\end{alignat*} # Convert the objective to negative array c = [ - 1 , - 2 , - 2 ] A = [[ 5 , 2 , 3 ], [ 1 , 4 , 2 ], [ 2 , 0 , 1 ]] b = [ 15 , 12 , 8 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $21/2$ at $(0,3377699720527873/4503599627370496,9/2)$ Example 2.a \u00b6 We can solve the second assignment \\begin{alignat*}{2} & \\text{maximize: } && 3x_1 - x_2 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x_1 + x_2 &\\geq 2 \\\\ x_1 + 3x_2 &\\leq 2 \\\\ x_2 &\\leq 4 \\\\ x_1,x_2 &\\geq 0 \\end{aligned} \\end{alignat*} # Convert the objective to negative array c = [ - 3 , - 1 ] A = [[ - 2 , - 1 ], [ 1 , 3 ], [ 0 , 1 ]] b = [ - 2 , 2 , 4 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $6$ at $(2,0)$ Example 5.a \u00b6 We can solve the second assignment \\begin{alignat*}{2} & \\text{maximize: } && 2x+4y \\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 2y &\\leq 5 \\\\ x + y &\\leq 4 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} # Convert the objective to negative array c = [ - 2 , - 4 ] A = [[ 1 , 2 ], [ 1 , 1 ]] b = [ 5 , 4 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $10$ at $(0,5/2)$ Example 4 \u00b6 Consider the following linear programming problem \\begin{alignat*}{2} & \\text{maximize: } && 3x+2y \\\\ & \\text{subject to: } && \\begin{aligned}[t] 4x - y &\\leq 4 \\\\ 4x +3y &\\leq 6 \\\\ 4x + y &\\leq 4 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} c = [ - 3 , - 2 ] A = [[ 4 , - 1 ], [ 4 , 3 ], [ 4 , 1 ]] b = [ 4 , 6 , 4 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $17/4$ at $(3/4,1)$ Example 6.b \u00b6 Show that the following problem has unbounded objective \\begin{alignat*}{2} & \\text{maximize: } && 20x_1 + 5x_2 + x_3 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 3x_1 + 5x_2 - 5x_3 &\\leq 50 \\\\ x_1 + 3x_2 - 4x_3 &\\leq 20 \\\\ x_1 &\\leq 10 \\\\ x_1, x_2, x_3 &\\geq 0 \\end{aligned} \\end{alignat*} c = [ - 20 , - 5 , - 1 ] A = [[ 3 , 5 , - 5 ], [ 1 , 3 , - 4 ], [ 1 , 0 , 0 ]] b = [ 50 , 20 , 10 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) res con: array([], dtype=float64) fun: -232.0 message: 'Optimization failed. The problem appears to be unbounded.' nit: 3 slack: array([0., 0., 0.]) status: 3 success: False x: array([10., 6., 2.]) Example 3.b \u00b6 Consider the following problem, in the phase I, the artificial variable didn't leave but assumes the value 0 , hence we can remove it and continue with phase II \\begin{alignat*}{2} & \\text{maximize: } && 2x_1 + 2x_2 + 4 x_3 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x_1 + x_2 + x_3 &\\leq 2 \\\\ 3x_1 + 4x_2 + 2x_3 &\\geq 8 \\\\ x_1, x_2, x_3 &\\geq 0 \\end{aligned} \\end{alignat*} c = [ - 2 , - 2 , - 4 ] A = [ [ 2 , 1 , 1 ], [ - 3 , - 4 , - 2 ] ] b = [ 2 , - 8 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $4$ at $(0,2,0)$","title":"Scipy"},{"location":"linear-programming/scipy/#example-1a","text":"Now let's try to solve the following problem from the assignment \\begin{alignat*}{2} & \\text{minimize: } && x_1 - 2x_2 - 4x_3 + 2x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 - 2x_3 &\\leq 4 \\\\ x_2 - x_4 &\\leq 8 \\\\ -2x_1 + x_2 + 8x_3 + x_4 &\\leq 12 \\\\ x_1,x_2,x_3,x_4 &\\geq 0 \\end{aligned} \\end{alignat*} We have to use the following command to solve this problem c = [ 1 , - 2 , - 4 , 2 ] A = [[ 1 , 0 , - 2 , 0 ], [ 0 , 1 , 0 , - 1 ], [ - 2 , 1 , 8 , 1 ]] b = [ 4 , 8 , 12 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ); res con: array([], dtype=float64) fun: -18.0 message: 'Optimization terminated successfully.' nit: 3 slack: array([5., 0., 0.]) status: 0 success: True x: array([0. , 8. , 0.5, 0. ]) We can use a small function to extract the important information and print in a line as follows. Markdown ( fancy_output ( res )) The value of optimal is $-18$ at $(0,8,1/2,0)$","title":"Example 1.a"},{"location":"linear-programming/scipy/#example-1b","text":"We can solve the second assignment \\begin{alignat*}{2} & \\text{minimize: } && 2x-y+2z \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x + y &\\leq 10 \\\\ x+2y-2z &\\leq 20 \\\\ y+2z &\\leq 5 \\\\ x,y,z &\\geq 0 \\end{aligned} \\end{alignat*} c = [ 2 , - 1 , 2 ] A = [[ 2 , 1 , 0 ], [ 1 , 2 , - 2 ], [ 0 , 1 , 2 ]] b = [ 10 , 20 , 5 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res )) The value of optimal is $-5$ at $(0,5,0)$","title":"Example 1.b"},{"location":"linear-programming/scipy/#example-1c","text":"We can solve the second assignment \\begin{alignat*}{2} & \\text{maximize: } && x_1 + 2x_2 + 2x_3, \\\\ & \\text{subject to: } && \\begin{aligned}[t] 5x_1 + 2x_2 + 3x_3 &\\leq 15 \\\\ x_1 + 4x_2 + 2x_3 &\\leq 12 \\\\ 2x_1 + x_3 &\\leq 8 \\\\ x_1,x_2,x_3 &\\geq 0 \\end{aligned} \\end{alignat*} # Convert the objective to negative array c = [ - 1 , - 2 , - 2 ] A = [[ 5 , 2 , 3 ], [ 1 , 4 , 2 ], [ 2 , 0 , 1 ]] b = [ 15 , 12 , 8 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $21/2$ at $(0,3377699720527873/4503599627370496,9/2)$","title":"Example 1.c"},{"location":"linear-programming/scipy/#example-2a","text":"We can solve the second assignment \\begin{alignat*}{2} & \\text{maximize: } && 3x_1 - x_2 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x_1 + x_2 &\\geq 2 \\\\ x_1 + 3x_2 &\\leq 2 \\\\ x_2 &\\leq 4 \\\\ x_1,x_2 &\\geq 0 \\end{aligned} \\end{alignat*} # Convert the objective to negative array c = [ - 3 , - 1 ] A = [[ - 2 , - 1 ], [ 1 , 3 ], [ 0 , 1 ]] b = [ - 2 , 2 , 4 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $6$ at $(2,0)$","title":"Example 2.a"},{"location":"linear-programming/scipy/#example-5a","text":"We can solve the second assignment \\begin{alignat*}{2} & \\text{maximize: } && 2x+4y \\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 2y &\\leq 5 \\\\ x + y &\\leq 4 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} # Convert the objective to negative array c = [ - 2 , - 4 ] A = [[ 1 , 2 ], [ 1 , 1 ]] b = [ 5 , 4 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $10$ at $(0,5/2)$","title":"Example 5.a"},{"location":"linear-programming/scipy/#example-4","text":"Consider the following linear programming problem \\begin{alignat*}{2} & \\text{maximize: } && 3x+2y \\\\ & \\text{subject to: } && \\begin{aligned}[t] 4x - y &\\leq 4 \\\\ 4x +3y &\\leq 6 \\\\ 4x + y &\\leq 4 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} c = [ - 3 , - 2 ] A = [[ 4 , - 1 ], [ 4 , 3 ], [ 4 , 1 ]] b = [ 4 , 6 , 4 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $17/4$ at $(3/4,1)$","title":"Example 4"},{"location":"linear-programming/scipy/#example-6b","text":"Show that the following problem has unbounded objective \\begin{alignat*}{2} & \\text{maximize: } && 20x_1 + 5x_2 + x_3 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 3x_1 + 5x_2 - 5x_3 &\\leq 50 \\\\ x_1 + 3x_2 - 4x_3 &\\leq 20 \\\\ x_1 &\\leq 10 \\\\ x_1, x_2, x_3 &\\geq 0 \\end{aligned} \\end{alignat*} c = [ - 20 , - 5 , - 1 ] A = [[ 3 , 5 , - 5 ], [ 1 , 3 , - 4 ], [ 1 , 0 , 0 ]] b = [ 50 , 20 , 10 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) res con: array([], dtype=float64) fun: -232.0 message: 'Optimization failed. The problem appears to be unbounded.' nit: 3 slack: array([0., 0., 0.]) status: 3 success: False x: array([10., 6., 2.])","title":"Example 6.b"},{"location":"linear-programming/scipy/#example-3b","text":"Consider the following problem, in the phase I, the artificial variable didn't leave but assumes the value 0 , hence we can remove it and continue with phase II \\begin{alignat*}{2} & \\text{maximize: } && 2x_1 + 2x_2 + 4 x_3 \\\\ & \\text{subject to: } && \\begin{aligned}[t] 2x_1 + x_2 + x_3 &\\leq 2 \\\\ 3x_1 + 4x_2 + 2x_3 &\\geq 8 \\\\ x_1, x_2, x_3 &\\geq 0 \\end{aligned} \\end{alignat*} c = [ - 2 , - 2 , - 4 ] A = [ [ 2 , 1 , 1 ], [ - 3 , - 4 , - 2 ] ] b = [ 2 , - 8 ] res = linprog ( c , A_ub = A , b_ub = b , method = 'simplex' ) Markdown ( fancy_output ( res , maximize = True )) The value of optimal is $4$ at $(0,2,0)$","title":"Example 3.b"},{"location":"linear-programming/simplex/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); from IPython.display import display , Markdown , Math import sympy as sp import numpy as np sp . init_printing () Solve the following optimization problem \\begin{alignat*}{2} & \\text{maximize: } && c^Tx \\\\ & \\text{subject to: } && \\begin{aligned}[t] Ax &\\leq b\\\\ x &\\geq 0 \\end{aligned} \\end{alignat*} Concrete Problem \u00b6 \\begin{alignat*}{2} & \\text{maximize: } && z = 2x + 3y\\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 3y &\\leq 12 \\\\ 3x + 2y &\\leq 12 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} # important functions def create_table ( T , basic ): # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$| \\n \" return display ( Markdown ( table )) def ratio_analysis ( T , basic , y ): entering_var = y entering_index = var . index ( entering_var ) # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$|$\" \\ + sp . latex ( T . row ( i )[ - 1 ] / T . row ( i )[ entering_index ]) \\ + \"$| \\n \" return display ( Markdown ( table )) def pivoting ( T , basic , entering_var , leaving_var ): entering_index = var . index ( entering_var ) leaving_index = basic . index ( leaving_var ) new_basic = basic . copy () new_basic [ leaving_index ] = entering_var no_rows = len ( basic ) T = T . elementary_row_op ( 'n->kn' , \\ row1 = leaving_index , \\ k = 1 / T [ leaving_index , entering_index ]) for i in range ( no_rows ): if i is not leaving_index : T = T . elementary_row_op ( 'n->n+km' , \\ row1 = i , \\ row2 = leaving_index , \\ k =- T [ i , entering_index ]) return ( T , new_basic ) Step I \u00b6 Fromulating the problem and creating the first table for simplex algorithm. # problem description using matrix c, b and A A = sp . Matrix ([[ 1 , 3 ], [ 3 , 2 ]]); c = sp . Matrix ([ - 2 , - 3 ]) b = sp . Matrix ([ 0 , 12 , 12 ]) # creating necessay data T1 = A . col_insert ( 2 , sp . eye ( 2 )) . row_insert ( 0 , c . row_insert ( 2 , sp . zeros ( 2 , 1 )) . T ) . col_insert ( 4 , b ) x , y , z = sp . symbols ( \"x y z\" ) s1 , s2 = sp . symbols ( \"s_1 s_2\" ) var = [ x , y , s1 , s2 ] basic1 = [ z , s1 , s2 ] create_table ( T1 , basic1 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-2$ $-3$ $0$ $0$ $0$ $s_{1}$ $1$ $3$ $1$ $0$ $12$ $s_{2}$ $3$ $2$ $0$ $1$ $12$ Step II \u00b6 We have to choose an entering variable which will increase the value of objective. So we choose any variable with negative coefficient. Here we choose y . ratio_analysis ( T1 , basic1 , y ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-2$ $-3$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $3$ $1$ $0$ $12$ $4$ $s_{2}$ $3$ $2$ $0$ $1$ $12$ $6$ Step III \u00b6 We have to choose a leaving variable based on ratio analysis. Here we choose the variable with least positive ratio. In this table s_1 has the least positive ratio, so it will leave. Now we have to perform the pivoting step. T2 , basic2 = pivoting ( T1 , basic1 , y , s1 ) Step IV \u00b6 After pivoting we get a new table. Where we can repreat the above steps again and again till the simplex algorithm terminate. In ideal case we get no entering varable. create_table ( T2 , basic2 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-1$ $0$ $1$ $0$ $12$ $y$ $\\frac{1}{3}$ $1$ $\\frac{1}{3}$ $0$ $4$ $s_{2}$ $\\frac{7}{3}$ $0$ $- \\frac{2}{3}$ $1$ $4$ ratio_analysis ( T2 , basic2 , x ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-1$ $0$ $1$ $0$ $12$ $-12$ $y$ $\\frac{1}{3}$ $1$ $\\frac{1}{3}$ $0$ $4$ $12$ $s_{2}$ $\\frac{7}{3}$ $0$ $- \\frac{2}{3}$ $1$ $4$ $\\frac{12}{7}$ T3 , basic3 = pivoting ( T2 , basic2 , x , s2 ) create_table ( T3 , basic3 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $0$ $0$ $\\frac{5}{7}$ $\\frac{3}{7}$ $\\frac{96}{7}$ $y$ $0$ $1$ $\\frac{3}{7}$ $- \\frac{1}{7}$ $\\frac{24}{7}$ $x$ $1$ $0$ $- \\frac{2}{7}$ $\\frac{3}{7}$ $\\frac{12}{7}$ Finally we got a table with all non-negaitve coefficient corresponding to z variable. The solution of this problem is 96/7 at the point (12/7, 24/7) Problem 2 \u00b6 Solve the following optimization problem. \\begin{alignat*}{2} & \\text{maximize: } && z = 2x_1 + x_2 - 3x_3 + 5x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 + 2x_2 + 2x_3 + 4x_4 &\\leq 40 \\\\ 2x_1 - x_2 + x_3 + 2x_4 &\\leq 8 \\\\ 4x_1 - 2x_2 + x_3 - x_4 &\\leq 10 \\\\ x_1, x_2, x_3, x_4 &\\geq 0 \\end{aligned} \\end{alignat*} # problem description using matrix c, b and A A = sp . Matrix ([ [ 1 , 2 , 2 , 4 ], \\ [ 2 , - 1 , 1 , 2 ], \\ [ 4 , - 2 , 1 , - 1 ] ]); c = sp . Matrix ([ 2 , 1 , - 3 , 5 ]) b = sp . Matrix ([ 40 , 8 , 10 ]) # creating necessay data no_eq , no_var = A . shape T1 = A . col_insert ( no_var , sp . eye ( no_eq )) \\ . col_insert ( no_var + no_eq , b ) \\ . row_insert ( 0 , - c . row_insert ( no_var , sp . zeros ( no_eq + 1 , 1 )) . T ) \\ T1 $\\displaystyle \\left[\\begin{matrix}-2 & -1 & 3 & -5 & 0 & 0 & 0 & 0\\\\1 & 2 & 2 & 4 & 1 & 0 & 0 & 40\\\\2 & -1 & 1 & 2 & 0 & 1 & 0 & 8\\\\4 & -2 & 1 & -1 & 0 & 0 & 1 & 10\\end{matrix}\\right]$ x1 , x2 , x3 , x4 = sp . symbols ( \"x1:5\" ) s1 , s2 , s3 = sp . symbols ( \"s1:4\" ) z = sp . symbols ( \"z\" ) var = [ x1 , x2 , x3 , x4 , s1 , s2 , s3 ] basic1 = [ z , s1 , s2 , s3 ] create_table ( T1 , basic1 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $-2$ $-1$ $3$ $-5$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $2$ $2$ $4$ $1$ $0$ $0$ $40$ $s_{2}$ $2$ $-1$ $1$ $2$ $0$ $1$ $0$ $8$ $s_{3}$ $4$ $-2$ $1$ $-1$ $0$ $0$ $1$ $10$ ratio_analysis ( T1 , basic1 , x4 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $-2$ $-1$ $3$ $-5$ $0$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $2$ $2$ $4$ $1$ $0$ $0$ $40$ $10$ $s_{2}$ $2$ $-1$ $1$ $2$ $0$ $1$ $0$ $8$ $4$ $s_{3}$ $4$ $-2$ $1$ $-1$ $0$ $0$ $1$ $10$ $-10$ T2 , basic2 = pivoting ( T1 , basic1 , x4 , s2 ) create_table ( T2 , basic2 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $3$ $- \\frac{7}{2}$ $\\frac{11}{2}$ $0$ $0$ $\\frac{5}{2}$ $0$ $20$ $s_{1}$ $-3$ $4$ $0$ $0$ $1$ $-2$ $0$ $24$ $x_{4}$ $1$ $- \\frac{1}{2}$ $\\frac{1}{2}$ $1$ $0$ $\\frac{1}{2}$ $0$ $4$ $s_{3}$ $5$ $- \\frac{5}{2}$ $\\frac{3}{2}$ $0$ $0$ $\\frac{1}{2}$ $1$ $14$ ratio_analysis ( T2 , basic2 , x2 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $3$ $- \\frac{7}{2}$ $\\frac{11}{2}$ $0$ $0$ $\\frac{5}{2}$ $0$ $20$ $- \\frac{40}{7}$ $s_{1}$ $-3$ $4$ $0$ $0$ $1$ $-2$ $0$ $24$ $6$ $x_{4}$ $1$ $- \\frac{1}{2}$ $\\frac{1}{2}$ $1$ $0$ $\\frac{1}{2}$ $0$ $4$ $-8$ $s_{3}$ $5$ $- \\frac{5}{2}$ $\\frac{3}{2}$ $0$ $0$ $\\frac{1}{2}$ $1$ $14$ $- \\frac{28}{5}$ T3 , basic3 = pivoting ( T2 , basic2 , x2 , s1 ) create_table ( T3 , basic3 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $\\frac{3}{8}$ $0$ $\\frac{11}{2}$ $0$ $\\frac{7}{8}$ $\\frac{3}{4}$ $0$ $41$ $x_{2}$ $- \\frac{3}{4}$ $1$ $0$ $0$ $\\frac{1}{4}$ $- \\frac{1}{2}$ $0$ $6$ $x_{4}$ $\\frac{5}{8}$ $0$ $\\frac{1}{2}$ $1$ $\\frac{1}{8}$ $\\frac{1}{4}$ $0$ $7$ $s_{3}$ $\\frac{25}{8}$ $0$ $\\frac{3}{2}$ $0$ $\\frac{5}{8}$ $- \\frac{3}{4}$ $1$ $29$ Since all the coefficient corresponding to z is non-negative, hence there will be no entering variable. The simplex algorithm will terminate. The objective is 41 at the point (0,6,0,7) .","title":"Simplex Algorithm"},{"location":"linear-programming/simplex/#concrete-problem","text":"\\begin{alignat*}{2} & \\text{maximize: } && z = 2x + 3y\\\\ & \\text{subject to: } && \\begin{aligned}[t] x + 3y &\\leq 12 \\\\ 3x + 2y &\\leq 12 \\\\ x, y &\\geq 0 \\end{aligned} \\end{alignat*} # important functions def create_table ( T , basic ): # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$| \\n \" return display ( Markdown ( table )) def ratio_analysis ( T , basic , y ): entering_var = y entering_index = var . index ( entering_var ) # creating table header no_var = len ( var ) table = \"|Basic|\" for i in range ( no_var ): table += \"$\" + sp . latex ( var [ i ]) + \"$|\" table += \"Solution|Ratio| \\n \" + \"|-----\" * ( no_var + 3 ) + \"| \\n \" no_rows = len ( basic ) for i in range ( no_rows ): table += \"|$\" + sp . latex ( basic [ i ]) for j in T . row ( i ): table += \"$|$\" + sp . latex ( j ) table += \"$|$\" \\ + sp . latex ( T . row ( i )[ - 1 ] / T . row ( i )[ entering_index ]) \\ + \"$| \\n \" return display ( Markdown ( table )) def pivoting ( T , basic , entering_var , leaving_var ): entering_index = var . index ( entering_var ) leaving_index = basic . index ( leaving_var ) new_basic = basic . copy () new_basic [ leaving_index ] = entering_var no_rows = len ( basic ) T = T . elementary_row_op ( 'n->kn' , \\ row1 = leaving_index , \\ k = 1 / T [ leaving_index , entering_index ]) for i in range ( no_rows ): if i is not leaving_index : T = T . elementary_row_op ( 'n->n+km' , \\ row1 = i , \\ row2 = leaving_index , \\ k =- T [ i , entering_index ]) return ( T , new_basic )","title":"Concrete Problem"},{"location":"linear-programming/simplex/#step-i","text":"Fromulating the problem and creating the first table for simplex algorithm. # problem description using matrix c, b and A A = sp . Matrix ([[ 1 , 3 ], [ 3 , 2 ]]); c = sp . Matrix ([ - 2 , - 3 ]) b = sp . Matrix ([ 0 , 12 , 12 ]) # creating necessay data T1 = A . col_insert ( 2 , sp . eye ( 2 )) . row_insert ( 0 , c . row_insert ( 2 , sp . zeros ( 2 , 1 )) . T ) . col_insert ( 4 , b ) x , y , z = sp . symbols ( \"x y z\" ) s1 , s2 = sp . symbols ( \"s_1 s_2\" ) var = [ x , y , s1 , s2 ] basic1 = [ z , s1 , s2 ] create_table ( T1 , basic1 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-2$ $-3$ $0$ $0$ $0$ $s_{1}$ $1$ $3$ $1$ $0$ $12$ $s_{2}$ $3$ $2$ $0$ $1$ $12$","title":"Step I"},{"location":"linear-programming/simplex/#step-ii","text":"We have to choose an entering variable which will increase the value of objective. So we choose any variable with negative coefficient. Here we choose y . ratio_analysis ( T1 , basic1 , y ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-2$ $-3$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $3$ $1$ $0$ $12$ $4$ $s_{2}$ $3$ $2$ $0$ $1$ $12$ $6$","title":"Step II"},{"location":"linear-programming/simplex/#step-iii","text":"We have to choose a leaving variable based on ratio analysis. Here we choose the variable with least positive ratio. In this table s_1 has the least positive ratio, so it will leave. Now we have to perform the pivoting step. T2 , basic2 = pivoting ( T1 , basic1 , y , s1 )","title":"Step III"},{"location":"linear-programming/simplex/#step-iv","text":"After pivoting we get a new table. Where we can repreat the above steps again and again till the simplex algorithm terminate. In ideal case we get no entering varable. create_table ( T2 , basic2 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-1$ $0$ $1$ $0$ $12$ $y$ $\\frac{1}{3}$ $1$ $\\frac{1}{3}$ $0$ $4$ $s_{2}$ $\\frac{7}{3}$ $0$ $- \\frac{2}{3}$ $1$ $4$ ratio_analysis ( T2 , basic2 , x ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $-1$ $0$ $1$ $0$ $12$ $-12$ $y$ $\\frac{1}{3}$ $1$ $\\frac{1}{3}$ $0$ $4$ $12$ $s_{2}$ $\\frac{7}{3}$ $0$ $- \\frac{2}{3}$ $1$ $4$ $\\frac{12}{7}$ T3 , basic3 = pivoting ( T2 , basic2 , x , s2 ) create_table ( T3 , basic3 ) Basic $x$ $y$ $s_{1}$ $s_{2}$ Solution Ratio $z$ $0$ $0$ $\\frac{5}{7}$ $\\frac{3}{7}$ $\\frac{96}{7}$ $y$ $0$ $1$ $\\frac{3}{7}$ $- \\frac{1}{7}$ $\\frac{24}{7}$ $x$ $1$ $0$ $- \\frac{2}{7}$ $\\frac{3}{7}$ $\\frac{12}{7}$ Finally we got a table with all non-negaitve coefficient corresponding to z variable. The solution of this problem is 96/7 at the point (12/7, 24/7)","title":"Step IV"},{"location":"linear-programming/simplex/#problem-2","text":"Solve the following optimization problem. \\begin{alignat*}{2} & \\text{maximize: } && z = 2x_1 + x_2 - 3x_3 + 5x_4 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x_1 + 2x_2 + 2x_3 + 4x_4 &\\leq 40 \\\\ 2x_1 - x_2 + x_3 + 2x_4 &\\leq 8 \\\\ 4x_1 - 2x_2 + x_3 - x_4 &\\leq 10 \\\\ x_1, x_2, x_3, x_4 &\\geq 0 \\end{aligned} \\end{alignat*} # problem description using matrix c, b and A A = sp . Matrix ([ [ 1 , 2 , 2 , 4 ], \\ [ 2 , - 1 , 1 , 2 ], \\ [ 4 , - 2 , 1 , - 1 ] ]); c = sp . Matrix ([ 2 , 1 , - 3 , 5 ]) b = sp . Matrix ([ 40 , 8 , 10 ]) # creating necessay data no_eq , no_var = A . shape T1 = A . col_insert ( no_var , sp . eye ( no_eq )) \\ . col_insert ( no_var + no_eq , b ) \\ . row_insert ( 0 , - c . row_insert ( no_var , sp . zeros ( no_eq + 1 , 1 )) . T ) \\ T1 $\\displaystyle \\left[\\begin{matrix}-2 & -1 & 3 & -5 & 0 & 0 & 0 & 0\\\\1 & 2 & 2 & 4 & 1 & 0 & 0 & 40\\\\2 & -1 & 1 & 2 & 0 & 1 & 0 & 8\\\\4 & -2 & 1 & -1 & 0 & 0 & 1 & 10\\end{matrix}\\right]$ x1 , x2 , x3 , x4 = sp . symbols ( \"x1:5\" ) s1 , s2 , s3 = sp . symbols ( \"s1:4\" ) z = sp . symbols ( \"z\" ) var = [ x1 , x2 , x3 , x4 , s1 , s2 , s3 ] basic1 = [ z , s1 , s2 , s3 ] create_table ( T1 , basic1 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $-2$ $-1$ $3$ $-5$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $2$ $2$ $4$ $1$ $0$ $0$ $40$ $s_{2}$ $2$ $-1$ $1$ $2$ $0$ $1$ $0$ $8$ $s_{3}$ $4$ $-2$ $1$ $-1$ $0$ $0$ $1$ $10$ ratio_analysis ( T1 , basic1 , x4 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $-2$ $-1$ $3$ $-5$ $0$ $0$ $0$ $0$ $0$ $s_{1}$ $1$ $2$ $2$ $4$ $1$ $0$ $0$ $40$ $10$ $s_{2}$ $2$ $-1$ $1$ $2$ $0$ $1$ $0$ $8$ $4$ $s_{3}$ $4$ $-2$ $1$ $-1$ $0$ $0$ $1$ $10$ $-10$ T2 , basic2 = pivoting ( T1 , basic1 , x4 , s2 ) create_table ( T2 , basic2 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $3$ $- \\frac{7}{2}$ $\\frac{11}{2}$ $0$ $0$ $\\frac{5}{2}$ $0$ $20$ $s_{1}$ $-3$ $4$ $0$ $0$ $1$ $-2$ $0$ $24$ $x_{4}$ $1$ $- \\frac{1}{2}$ $\\frac{1}{2}$ $1$ $0$ $\\frac{1}{2}$ $0$ $4$ $s_{3}$ $5$ $- \\frac{5}{2}$ $\\frac{3}{2}$ $0$ $0$ $\\frac{1}{2}$ $1$ $14$ ratio_analysis ( T2 , basic2 , x2 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $3$ $- \\frac{7}{2}$ $\\frac{11}{2}$ $0$ $0$ $\\frac{5}{2}$ $0$ $20$ $- \\frac{40}{7}$ $s_{1}$ $-3$ $4$ $0$ $0$ $1$ $-2$ $0$ $24$ $6$ $x_{4}$ $1$ $- \\frac{1}{2}$ $\\frac{1}{2}$ $1$ $0$ $\\frac{1}{2}$ $0$ $4$ $-8$ $s_{3}$ $5$ $- \\frac{5}{2}$ $\\frac{3}{2}$ $0$ $0$ $\\frac{1}{2}$ $1$ $14$ $- \\frac{28}{5}$ T3 , basic3 = pivoting ( T2 , basic2 , x2 , s1 ) create_table ( T3 , basic3 ) Basic $x_{1}$ $x_{2}$ $x_{3}$ $x_{4}$ $s_{1}$ $s_{2}$ $s_{3}$ Solution Ratio $z$ $\\frac{3}{8}$ $0$ $\\frac{11}{2}$ $0$ $\\frac{7}{8}$ $\\frac{3}{4}$ $0$ $41$ $x_{2}$ $- \\frac{3}{4}$ $1$ $0$ $0$ $\\frac{1}{4}$ $- \\frac{1}{2}$ $0$ $6$ $x_{4}$ $\\frac{5}{8}$ $0$ $\\frac{1}{2}$ $1$ $\\frac{1}{8}$ $\\frac{1}{4}$ $0$ $7$ $s_{3}$ $\\frac{25}{8}$ $0$ $\\frac{3}{2}$ $0$ $\\frac{5}{8}$ $- \\frac{3}{4}$ $1$ $29$ Since all the coefficient corresponding to z is non-negative, hence there will be no entering variable. The simplex algorithm will terminate. The objective is 41 at the point (0,6,0,7) .","title":"Problem 2"},{"location":"nonlinear-programming/equality-constraints/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); from IPython.display import display , Markdown , Math from sympy import init_printing init_printing () KKT Conditions \u00b6 Find the minimum (over x , y ) of the function f(x,y) , subject to g(x,y)=0 , where \\begin{alignat*}{2} & \\text{minimize: } && 2 x^2 + 3 y^2 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x^2 + y^2 &= 4 \\end{aligned} \\end{alignat*} Step I \u00b6 Defining variable and functions import sympy as sp x , y = sp . var ( 'x,y' , real = True ); f = 2 * x ** 2 + 3 * y ** 2 g = x ** 2 + y ** 2 - 4 display ( Math ( rf \"\"\" f = { sp . latex ( f ) } \\\\ g = { sp . latex ( g ) } \"\"\" )) $\\displaystyle f = 2 x^{2} + 3 y^{2}\\\\ g = x^{2} + y^{2} - 4 $ Step II \u00b6 Defining lagrangian function. lam = sp . symbols ( 'lambda' , real = True ) L = f - lam * g display ( Markdown ( rf \"The lagrangian $L= { sp . latex ( L ) } $\" )) The lagrangian $L=- \\lambda \\left(x^{2} + y^{2} - 4\\right) + 2 x^{2} + 3 y^{2}$ Step III \u00b6 Deriving KKT equations gradL = [ sp . diff ( L , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) KKT_eqs = gradL + [ g ] expr = \"\" for i in KKT_eqs : expr += sp . latex ( i ) + \"= 0 \\\\\\\\ \" display ( Math ( expr )) $\\displaystyle - 2 \\lambda x + 4 x= 0 \\\\- 2 \\lambda y + 6 y= 0 \\\\x^{2} + y^{2} - 4= 0 \\\\$ Step IV \u00b6 Solving KKT Conditions to obtain necessary points stationary_points = sp . solve ( KKT_eqs , [ x , y , lam ], dict = True ) # solve the KKT equations stationary_points table = \"|$x$|$y$|$\\lambda$|Obj| \\n |---|---|---|---| \\n \" for i in stationary_points : table += \"|$\" + str ( i [ x ]) \\ + \"$|$\" + str ( i [ y ]) \\ + \"$|$\" + str ( i [ lam ]) \\ + \"$|$\" + str ( f . subs ( i )) \\ + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ $\\lambda$ Obj $-2$ $0$ $2$ $8$ $2$ $0$ $2$ $8$ $0$ $-2$ $3$ $12$ $0$ $2$ $3$ $12$ Step V \u00b6 Computing Bordered Hessian for each points H = sp . hessian ( L , ( x , y ), [ g ]) display ( Math ( r \"\\bar {H} = \" + sp . latex ( H ))) $\\displaystyle \\bar{H} = \\left[\\begin{matrix}0 & 2 x & 2 y\\\\2 x & - 2 \\lambda + 4 & 0\\\\2 y & 0 & - 2 \\lambda + 6\\end{matrix}\\right]$ Step VI \u00b6 Determinant of the bordered hessian will provide maxima and minima. [ H . subs ( p ) . det () for p in stationary_points ] table = \"|$x$|$y$|$\\lambda$|Obj|Bordered<br>Hessian| \\n \" \\ + \"|---|---|---|---|---| \\n \" for i in stationary_points : table += \"|$\" + sp . latex ( i [ x ]) + \"$|$\" \\ + sp . latex ( i [ y ]) + \"$|$\" \\ + sp . latex ( i [ lam ]) + \"$|$\" \\ + sp . latex ( f . subs ( i )) + \"$|$\" \\ + sp . latex ( H . subs ( i ) . det ()) + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ $\\lambda$ Obj Bordered Hessian $-2$ $0$ $2$ $8$ $-32$ $2$ $0$ $2$ $8$ $-32$ $0$ $-2$ $3$ $12$ $32$ $0$ $2$ $3$ $12$ $32$ Conclusion: First two points are minima while third and forth points are maxima.","title":"Equality Constraints"},{"location":"nonlinear-programming/equality-constraints/#kkt-conditions","text":"Find the minimum (over x , y ) of the function f(x,y) , subject to g(x,y)=0 , where \\begin{alignat*}{2} & \\text{minimize: } && 2 x^2 + 3 y^2 \\\\ & \\text{subject to: } && \\begin{aligned}[t] x^2 + y^2 &= 4 \\end{aligned} \\end{alignat*}","title":"KKT Conditions"},{"location":"nonlinear-programming/equality-constraints/#step-i","text":"Defining variable and functions import sympy as sp x , y = sp . var ( 'x,y' , real = True ); f = 2 * x ** 2 + 3 * y ** 2 g = x ** 2 + y ** 2 - 4 display ( Math ( rf \"\"\" f = { sp . latex ( f ) } \\\\ g = { sp . latex ( g ) } \"\"\" )) $\\displaystyle f = 2 x^{2} + 3 y^{2}\\\\ g = x^{2} + y^{2} - 4 $","title":"Step I"},{"location":"nonlinear-programming/equality-constraints/#step-ii","text":"Defining lagrangian function. lam = sp . symbols ( 'lambda' , real = True ) L = f - lam * g display ( Markdown ( rf \"The lagrangian $L= { sp . latex ( L ) } $\" )) The lagrangian $L=- \\lambda \\left(x^{2} + y^{2} - 4\\right) + 2 x^{2} + 3 y^{2}$","title":"Step II"},{"location":"nonlinear-programming/equality-constraints/#step-iii","text":"Deriving KKT equations gradL = [ sp . diff ( L , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) KKT_eqs = gradL + [ g ] expr = \"\" for i in KKT_eqs : expr += sp . latex ( i ) + \"= 0 \\\\\\\\ \" display ( Math ( expr )) $\\displaystyle - 2 \\lambda x + 4 x= 0 \\\\- 2 \\lambda y + 6 y= 0 \\\\x^{2} + y^{2} - 4= 0 \\\\$","title":"Step III"},{"location":"nonlinear-programming/equality-constraints/#step-iv","text":"Solving KKT Conditions to obtain necessary points stationary_points = sp . solve ( KKT_eqs , [ x , y , lam ], dict = True ) # solve the KKT equations stationary_points table = \"|$x$|$y$|$\\lambda$|Obj| \\n |---|---|---|---| \\n \" for i in stationary_points : table += \"|$\" + str ( i [ x ]) \\ + \"$|$\" + str ( i [ y ]) \\ + \"$|$\" + str ( i [ lam ]) \\ + \"$|$\" + str ( f . subs ( i )) \\ + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ $\\lambda$ Obj $-2$ $0$ $2$ $8$ $2$ $0$ $2$ $8$ $0$ $-2$ $3$ $12$ $0$ $2$ $3$ $12$","title":"Step IV"},{"location":"nonlinear-programming/equality-constraints/#step-v","text":"Computing Bordered Hessian for each points H = sp . hessian ( L , ( x , y ), [ g ]) display ( Math ( r \"\\bar {H} = \" + sp . latex ( H ))) $\\displaystyle \\bar{H} = \\left[\\begin{matrix}0 & 2 x & 2 y\\\\2 x & - 2 \\lambda + 4 & 0\\\\2 y & 0 & - 2 \\lambda + 6\\end{matrix}\\right]$","title":"Step V"},{"location":"nonlinear-programming/equality-constraints/#step-vi","text":"Determinant of the bordered hessian will provide maxima and minima. [ H . subs ( p ) . det () for p in stationary_points ] table = \"|$x$|$y$|$\\lambda$|Obj|Bordered<br>Hessian| \\n \" \\ + \"|---|---|---|---|---| \\n \" for i in stationary_points : table += \"|$\" + sp . latex ( i [ x ]) + \"$|$\" \\ + sp . latex ( i [ y ]) + \"$|$\" \\ + sp . latex ( i [ lam ]) + \"$|$\" \\ + sp . latex ( f . subs ( i )) + \"$|$\" \\ + sp . latex ( H . subs ( i ) . det ()) + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ $\\lambda$ Obj Bordered Hessian $-2$ $0$ $2$ $8$ $-32$ $2$ $0$ $2$ $8$ $-32$ $0$ $-2$ $3$ $12$ $32$ $0$ $2$ $3$ $12$ $32$ Conclusion: First two points are minima while third and forth points are maxima.","title":"Step VI"},{"location":"nonlinear-programming/kkt/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); import numpy as np import sympy as sp import matplotlib.pyplot as plt from IPython.display import display , Markdown , Math sp . init_printing () Solve the following optimization problem \\begin{alignat*}{2} & \\text{minimize: } && xy \\\\ & \\text{subject to: } && \\begin{aligned}[t] x+2y &\\leq 8\\\\ \\dfrac{x^2}{16}+1 &\\leq y \\\\ x &\\geq 0 \\\\ 0 \\leq y &\\leq 3 \\end{aligned} \\end{alignat*} % matplotlib inline plt . figure ( num = None , figsize = ( 8 , 6 ), dpi = 80 , facecolor = 'w' , edgecolor = 'k' ) plt . rcParams . update ({ 'font.size' : 14 }) # plot the feasible region d = np . linspace ( 0 , 4 , 300 ) x , y = np . meshgrid ( d , d ) plt . imshow ( (( y <= 3 ) & ( x + 2 * y <= 8 ) & ( x ** 2 / 16 + 1 <= y ) & ( x >= 0 )) . astype ( int ) , extent = ( x . min (), x . max (), y . min (), y . max ()), origin = \"lower\" , cmap = \"Greys\" , alpha = 0.3 ); # plot the lines defining the constraints x = np . linspace ( 0 , 5 , 100 ) # y >= 2 y1 = ( x * 0 ) + 3 # 2y <= 25 - x y2 = 4 - x / 2 # 4y >= 2x - 8 y3 = x ** 2 / 16 + 1 # y <= 2x - 5 y4 = x * 0 + 0.01 # Annotation plt . annotate ( '$A$' , ( 0.1 , 3.1 )) plt . annotate ( '$B$' , ( 2 , 3.1 )) plt . annotate ( '$C$' , ( 3.9 , 1.8 )) plt . annotate ( '$D$' , ( 0.1 , 0.8 )) # Make plot plt . plot ( x , y1 , label = r '$y\\leq3$' , linewidth = 3 ) plt . plot ( x , y2 , label = r '$x+2y\\leq8$' , linewidth = 3 ) plt . plot ( x , y3 , label = r '$\\dfrac{x^2} {16} +1\\leq y$' , linewidth = 3 ) plt . axvline ( 0.01 , 0 , 4 , label = r '$x\\geq0$' , color = 'm' , linewidth = 3 ) plt . plot ( x , y4 , label = r '$y\\geq0$' , color = 'c' , linewidth = 3 ) plt . xlim ( 0 , 5 ) plt . ylim ( 0 , 4 ) plt . legend ( bbox_to_anchor = ( 1.05 , 1 ), loc = 2 , borderaxespad = 0. ) plt . xlabel ( r '$x$' ) plt . ylabel ( r '$y$' ) plt . yticks ( range ( 0 , 5 )) plt . show () We can see that the constraint y\\geq 0 is not active. So we don't have to include this constraint in our solution. Case I \u00b6 First we search for critical points in the interior of the region. x , y = sp . var ( 'x,y' , real = True ); f = x * y g1 = 3 - y g2 = 8 - x - 2 * y g3 = y - x ** 2 / 16 - 1 g4 = x display ( Math ( rf \"\"\" f = { sp . latex ( f ) } \\\\ g_1 = { sp . latex ( g1 ) } \\\\ g_2 = { sp . latex ( g2 ) } \\\\ g_3 = { sp . latex ( g3 ) } \\\\ g_4 = { sp . latex ( g4 ) } \"\"\" )) $\\displaystyle f = x y\\\\ g_1 = - y + 3\\\\ g_2 = - x - 2 y + 8\\\\ g_3 = - \\frac{x^{2}}{16} + y - 1\\\\ g_4 = x $ lam1 = sp . symbols ( 'lambda_1' , real = True ) lam2 = sp . symbols ( 'lambda_2' , real = True ) lam3 = sp . symbols ( 'lambda_3' , real = True ) lam4 = sp . symbols ( 'lambda_4' , real = True ) L = f + lam1 * g1 + lam2 * g2 + lam3 * g3 + lam4 * g4 display ( Markdown ( rf \"The lagrangian $L= { sp . latex ( L ) } $\" )) The lagrangian $L=\\lambda_{1} \\left(- y + 3\\right) + \\lambda_{2} \\left(- x - 2 y + 8\\right) + \\lambda_{3} \\left(- \\frac{x^{2}}{16} + y - 1\\right) + \\lambda_{4} x + x y$ gradL = [ sp . diff ( L , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) KKT_eqs = gradL + [ lam1 * g1 , lam2 * g2 , lam3 * g3 , lam4 * g4 ] expr = \"\" for i in KKT_eqs : expr += sp . latex ( i ) + \"= 0 \\\\\\\\ \" display ( Math ( expr )) $\\displaystyle - \\lambda_{2} - \\frac{\\lambda_{3} x}{8} + \\lambda_{4} + y= 0 \\\\- \\lambda_{1} - 2 \\lambda_{2} + \\lambda_{3} + x= 0 \\\\\\lambda_{1} \\left(- y + 3\\right)= 0 \\\\\\lambda_{2} \\left(- x - 2 y + 8\\right)= 0 \\\\\\lambda_{3} \\left(- \\frac{x^{2}}{16} + y - 1\\right)= 0 \\\\\\lambda_{4} x= 0 \\\\$ stationary_points = sp . solve ( KKT_eqs , [ x , y , lam1 , lam2 , lam3 , lam4 ], dict = True ) # solve the KKT equations stationary_points table = f \"|$x$|$y$|$ { sp . latex ( lam1 ) } $|$ { sp . latex ( lam2 ) } $|$ { sp . latex ( lam3 ) } $|$ { sp . latex ( lam4 ) } $|Obj| \\n \" \\ + \"|---|---|---|---|---|---|---| \\n \" for i in stationary_points : table += \"|$\" + str ( i [ x ]) \\ + \"$|$\" + str ( i [ y ]) \\ + \"$|$\" + str ( i [ lam1 ]) \\ + \"$|$\" + str ( i [ lam2 ]) \\ + \"$|$\" + str ( i [ lam3 ]) \\ + \"$|$\" + str ( i [ lam4 ]) \\ + \"$|$\" + str ( f . subs ( i )) \\ + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ $\\lambda_{1}$ $\\lambda_{2}$ $\\lambda_{3}$ $\\lambda_{4}$ Obj $0$ $4$ $0$ $0$ $0$ $-4$ $0$ $0$ $3$ $0$ $0$ $0$ $-3$ $0$ $0$ $1$ $0$ $0$ $0$ $-1$ $0$ $0$ $0$ $0$ $0$ $0$ $0$ $0$","title":"Kkt"},{"location":"nonlinear-programming/kkt/#case-i","text":"First we search for critical points in the interior of the region. x , y = sp . var ( 'x,y' , real = True ); f = x * y g1 = 3 - y g2 = 8 - x - 2 * y g3 = y - x ** 2 / 16 - 1 g4 = x display ( Math ( rf \"\"\" f = { sp . latex ( f ) } \\\\ g_1 = { sp . latex ( g1 ) } \\\\ g_2 = { sp . latex ( g2 ) } \\\\ g_3 = { sp . latex ( g3 ) } \\\\ g_4 = { sp . latex ( g4 ) } \"\"\" )) $\\displaystyle f = x y\\\\ g_1 = - y + 3\\\\ g_2 = - x - 2 y + 8\\\\ g_3 = - \\frac{x^{2}}{16} + y - 1\\\\ g_4 = x $ lam1 = sp . symbols ( 'lambda_1' , real = True ) lam2 = sp . symbols ( 'lambda_2' , real = True ) lam3 = sp . symbols ( 'lambda_3' , real = True ) lam4 = sp . symbols ( 'lambda_4' , real = True ) L = f + lam1 * g1 + lam2 * g2 + lam3 * g3 + lam4 * g4 display ( Markdown ( rf \"The lagrangian $L= { sp . latex ( L ) } $\" )) The lagrangian $L=\\lambda_{1} \\left(- y + 3\\right) + \\lambda_{2} \\left(- x - 2 y + 8\\right) + \\lambda_{3} \\left(- \\frac{x^{2}}{16} + y - 1\\right) + \\lambda_{4} x + x y$ gradL = [ sp . diff ( L , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) KKT_eqs = gradL + [ lam1 * g1 , lam2 * g2 , lam3 * g3 , lam4 * g4 ] expr = \"\" for i in KKT_eqs : expr += sp . latex ( i ) + \"= 0 \\\\\\\\ \" display ( Math ( expr )) $\\displaystyle - \\lambda_{2} - \\frac{\\lambda_{3} x}{8} + \\lambda_{4} + y= 0 \\\\- \\lambda_{1} - 2 \\lambda_{2} + \\lambda_{3} + x= 0 \\\\\\lambda_{1} \\left(- y + 3\\right)= 0 \\\\\\lambda_{2} \\left(- x - 2 y + 8\\right)= 0 \\\\\\lambda_{3} \\left(- \\frac{x^{2}}{16} + y - 1\\right)= 0 \\\\\\lambda_{4} x= 0 \\\\$ stationary_points = sp . solve ( KKT_eqs , [ x , y , lam1 , lam2 , lam3 , lam4 ], dict = True ) # solve the KKT equations stationary_points table = f \"|$x$|$y$|$ { sp . latex ( lam1 ) } $|$ { sp . latex ( lam2 ) } $|$ { sp . latex ( lam3 ) } $|$ { sp . latex ( lam4 ) } $|Obj| \\n \" \\ + \"|---|---|---|---|---|---|---| \\n \" for i in stationary_points : table += \"|$\" + str ( i [ x ]) \\ + \"$|$\" + str ( i [ y ]) \\ + \"$|$\" + str ( i [ lam1 ]) \\ + \"$|$\" + str ( i [ lam2 ]) \\ + \"$|$\" + str ( i [ lam3 ]) \\ + \"$|$\" + str ( i [ lam4 ]) \\ + \"$|$\" + str ( f . subs ( i )) \\ + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ $\\lambda_{1}$ $\\lambda_{2}$ $\\lambda_{3}$ $\\lambda_{4}$ Obj $0$ $4$ $0$ $0$ $0$ $-4$ $0$ $0$ $3$ $0$ $0$ $0$ $-3$ $0$ $0$ $1$ $0$ $0$ $0$ $-1$ $0$ $0$ $0$ $0$ $0$ $0$ $0$ $0$","title":"Case I"},{"location":"nonlinear-programming/kkt1/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); import numpy as np import sympy as sp import matplotlib.pyplot as plt from IPython.display import display , Markdown , Math sp . init_printing () Solve the following optimization problem \\begin{alignat*}{2} & \\text{maximize: } && xy \\\\ & \\text{subject to: } && \\begin{aligned}[t] x+y^2 &\\leq 2\\\\ x,y &\\geq 0 \\end{aligned} \\end{alignat*} Step I \u00b6 We try to draw the feasible region. % matplotlib inline plt . figure ( num = None , figsize = ( 8 , 6 ), dpi = 80 , facecolor = 'w' , edgecolor = 'k' ) plt . rcParams . update ({ 'font.size' : 14 }) # plot the feasible region d = np . linspace ( 0 , 3 , 300 ) x , y = np . meshgrid ( d , d ) plt . imshow ( (( x + y ** 2 <= 2 ) & ( y >= 0 ) & ( x >= 0 )) . astype ( int ) , extent = ( x . min (), x . max (), y . min (), y . max ()), origin = \"lower\" , cmap = \"Greys\" , alpha = 0.3 ); # plot the lines defining the constraints x1 = np . linspace ( 0 , 2 , 100 ) x = np . linspace ( 0 , 3 , 100 ) y1 = np . sqrt ( 2 - x1 ) y4 = x * 0 + 0.01 # Annotation plt . annotate ( '$A$' , ( 0.1 , 1.5 )) plt . annotate ( '$B$' , ( 2.1 , 0.1 )) plt . annotate ( '$O$' , ( 0.1 , 0.1 )) # Make plot plt . plot ( x1 , y1 , label = r '$x+y^2\\leq2$' , linewidth = 3 ) plt . axvline ( 0.01 , 0 , 1 , label = r '$x\\geq0$' , color = 'm' , linewidth = 3 ) plt . plot ( x , y4 , label = r '$y\\geq0$' , color = 'c' , linewidth = 3 ) plt . xlim ( 0 , 3 ) plt . ylim ( 0 , 2 ) plt . legend ( bbox_to_anchor = ( 1.05 , 1 ), loc = 2 , borderaxespad = 0. ) plt . xlabel ( r '$x$' ) plt . ylabel ( r '$y$' ) plt . xticks ( range ( 0 , 3 )) plt . yticks ( range ( 0 , 2 )) # Maxima plt . scatter ( 4 / 3 , np . sqrt ( 2 / 3 ), color = 'r' ) plt . annotate ( 'Maximum' , ( 4 / 3 + 0.1 , np . sqrt ( 2 / 3 ))) plt . show () Step II \u00b6 Defining variable and functions. x , y = sp . var ( 'x,y' , real = True ); f = x * y g1 = 2 - x - y ** 2 g2 = y g3 = x display ( Math ( rf \"\"\" f = { sp . latex ( f ) } \\\\ g_1 = { sp . latex ( g1 ) } \\\\ g_2 = { sp . latex ( g2 ) } \\\\ g_3 = { sp . latex ( g3 ) } \"\"\" )) $\\displaystyle f = x y\\\\ g_1 = - x - y^{2} + 2\\\\ g_2 = y\\\\ g_3 = x $ Step III \u00b6 Forming the Lagrangian. lam1 = sp . symbols ( 'lambda_1' , real = True ) lam2 = sp . symbols ( 'lambda_2' , real = True ) lam3 = sp . symbols ( 'lambda_3' , real = True ) L = f + lam1 * g1 + lam2 * g2 + lam3 * g3 + lam4 * g4 display ( Markdown ( rf \"The lagrangian $L= { sp . latex ( L ) } $\" )) The lagrangian $L=\\lambda_{1} \\left(- x - y^{2} + 2\\right) + \\lambda_{2} y + \\lambda_{3} x + \\lambda_{4} x + x y$ Step IV \u00b6 We will find the KKT equations, here we first solve only equalities. Later we use inequalities to remove extra points. gradL = [ sp . diff ( L , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) KKT_eqs = gradL + [ lam1 * g1 , lam2 * g2 , lam3 * g3 ] expr = \"\" for i in KKT_eqs : expr += sp . latex ( i ) + \"= 0 \\\\\\\\ \" display ( Math ( expr )) $\\displaystyle - \\lambda_{1} + \\lambda_{3} + y= 0 \\\\- 2 \\lambda_{1} y + \\lambda_{2} + x= 0 \\\\\\lambda_{1} \\left(- x - y^{2} + 2\\right)= 0 \\\\\\lambda_{2} y= 0 \\\\\\lambda_{3} x= 0 \\\\$ stationary_points = sp . solve ( KKT_eqs , [ x , y , lam1 , lam2 , lam3 ], dict = True ) # solve the KKT equations stationary_points table = f \"|$x$|$y$|$ { sp . latex ( lam1 ) } $|$ { sp . latex ( lam2 ) } $|$ { sp . latex ( lam3 ) } $|Obj| \\n \" \\ + \"|---|---|---|---|---|------| \\n \" for i in stationary_points : table += \"|$\" + sp . latex ( i [ x ]) \\ + \"$|$\" + sp . latex ( i [ y ]) \\ + \"$|$\" + sp . latex ( i [ lam1 ]) \\ + \"$|$\" + sp . latex ( i [ lam2 ]) \\ + \"$|$\" + sp . latex ( i [ lam3 ]) \\ + \"$|$\" + sp . latex ( f . subs ( i )) \\ + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ $\\lambda_{1}$ $\\lambda_{2}$ $\\lambda_{3}$ Obj $0$ $0$ $0$ $0$ $0$ $0$ $\\frac{4}{3}$ $- \\frac{\\sqrt{6}}{3}$ $- \\frac{\\sqrt{6}}{3}$ $0$ $0$ $- \\frac{4 \\sqrt{6}}{9}$ $\\frac{4}{3}$ $\\frac{\\sqrt{6}}{3}$ $\\frac{\\sqrt{6}}{3}$ $0$ $0$ $\\frac{4 \\sqrt{6}}{9}$ Conclusion: Since \\lambda 's must be nonnegative, hence we have to discard the second point. As both the point lies in the feasible region, they are local maxima, but the second point is global maxima.","title":"KKT Conditions"},{"location":"nonlinear-programming/kkt1/#step-i","text":"We try to draw the feasible region. % matplotlib inline plt . figure ( num = None , figsize = ( 8 , 6 ), dpi = 80 , facecolor = 'w' , edgecolor = 'k' ) plt . rcParams . update ({ 'font.size' : 14 }) # plot the feasible region d = np . linspace ( 0 , 3 , 300 ) x , y = np . meshgrid ( d , d ) plt . imshow ( (( x + y ** 2 <= 2 ) & ( y >= 0 ) & ( x >= 0 )) . astype ( int ) , extent = ( x . min (), x . max (), y . min (), y . max ()), origin = \"lower\" , cmap = \"Greys\" , alpha = 0.3 ); # plot the lines defining the constraints x1 = np . linspace ( 0 , 2 , 100 ) x = np . linspace ( 0 , 3 , 100 ) y1 = np . sqrt ( 2 - x1 ) y4 = x * 0 + 0.01 # Annotation plt . annotate ( '$A$' , ( 0.1 , 1.5 )) plt . annotate ( '$B$' , ( 2.1 , 0.1 )) plt . annotate ( '$O$' , ( 0.1 , 0.1 )) # Make plot plt . plot ( x1 , y1 , label = r '$x+y^2\\leq2$' , linewidth = 3 ) plt . axvline ( 0.01 , 0 , 1 , label = r '$x\\geq0$' , color = 'm' , linewidth = 3 ) plt . plot ( x , y4 , label = r '$y\\geq0$' , color = 'c' , linewidth = 3 ) plt . xlim ( 0 , 3 ) plt . ylim ( 0 , 2 ) plt . legend ( bbox_to_anchor = ( 1.05 , 1 ), loc = 2 , borderaxespad = 0. ) plt . xlabel ( r '$x$' ) plt . ylabel ( r '$y$' ) plt . xticks ( range ( 0 , 3 )) plt . yticks ( range ( 0 , 2 )) # Maxima plt . scatter ( 4 / 3 , np . sqrt ( 2 / 3 ), color = 'r' ) plt . annotate ( 'Maximum' , ( 4 / 3 + 0.1 , np . sqrt ( 2 / 3 ))) plt . show ()","title":"Step I"},{"location":"nonlinear-programming/kkt1/#step-ii","text":"Defining variable and functions. x , y = sp . var ( 'x,y' , real = True ); f = x * y g1 = 2 - x - y ** 2 g2 = y g3 = x display ( Math ( rf \"\"\" f = { sp . latex ( f ) } \\\\ g_1 = { sp . latex ( g1 ) } \\\\ g_2 = { sp . latex ( g2 ) } \\\\ g_3 = { sp . latex ( g3 ) } \"\"\" )) $\\displaystyle f = x y\\\\ g_1 = - x - y^{2} + 2\\\\ g_2 = y\\\\ g_3 = x $","title":"Step II"},{"location":"nonlinear-programming/kkt1/#step-iii","text":"Forming the Lagrangian. lam1 = sp . symbols ( 'lambda_1' , real = True ) lam2 = sp . symbols ( 'lambda_2' , real = True ) lam3 = sp . symbols ( 'lambda_3' , real = True ) L = f + lam1 * g1 + lam2 * g2 + lam3 * g3 + lam4 * g4 display ( Markdown ( rf \"The lagrangian $L= { sp . latex ( L ) } $\" )) The lagrangian $L=\\lambda_{1} \\left(- x - y^{2} + 2\\right) + \\lambda_{2} y + \\lambda_{3} x + \\lambda_{4} x + x y$","title":"Step III"},{"location":"nonlinear-programming/kkt1/#step-iv","text":"We will find the KKT equations, here we first solve only equalities. Later we use inequalities to remove extra points. gradL = [ sp . diff ( L , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) KKT_eqs = gradL + [ lam1 * g1 , lam2 * g2 , lam3 * g3 ] expr = \"\" for i in KKT_eqs : expr += sp . latex ( i ) + \"= 0 \\\\\\\\ \" display ( Math ( expr )) $\\displaystyle - \\lambda_{1} + \\lambda_{3} + y= 0 \\\\- 2 \\lambda_{1} y + \\lambda_{2} + x= 0 \\\\\\lambda_{1} \\left(- x - y^{2} + 2\\right)= 0 \\\\\\lambda_{2} y= 0 \\\\\\lambda_{3} x= 0 \\\\$ stationary_points = sp . solve ( KKT_eqs , [ x , y , lam1 , lam2 , lam3 ], dict = True ) # solve the KKT equations stationary_points table = f \"|$x$|$y$|$ { sp . latex ( lam1 ) } $|$ { sp . latex ( lam2 ) } $|$ { sp . latex ( lam3 ) } $|Obj| \\n \" \\ + \"|---|---|---|---|---|------| \\n \" for i in stationary_points : table += \"|$\" + sp . latex ( i [ x ]) \\ + \"$|$\" + sp . latex ( i [ y ]) \\ + \"$|$\" + sp . latex ( i [ lam1 ]) \\ + \"$|$\" + sp . latex ( i [ lam2 ]) \\ + \"$|$\" + sp . latex ( i [ lam3 ]) \\ + \"$|$\" + sp . latex ( f . subs ( i )) \\ + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ $\\lambda_{1}$ $\\lambda_{2}$ $\\lambda_{3}$ Obj $0$ $0$ $0$ $0$ $0$ $0$ $\\frac{4}{3}$ $- \\frac{\\sqrt{6}}{3}$ $- \\frac{\\sqrt{6}}{3}$ $0$ $0$ $- \\frac{4 \\sqrt{6}}{9}$ $\\frac{4}{3}$ $\\frac{\\sqrt{6}}{3}$ $\\frac{\\sqrt{6}}{3}$ $0$ $0$ $\\frac{4 \\sqrt{6}}{9}$ Conclusion: Since \\lambda 's must be nonnegative, hence we have to discard the second point. As both the point lies in the feasible region, they are local maxima, but the second point is global maxima.","title":"Step IV"},{"location":"nonlinear-programming/unconstrained-optimization/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); from IPython.display import display , Markdown , Math import sympy as sp import numpy as np sp . init_printing () Find the maxima of the following function f(x,y)=x^4 \u2212x^2y+y^2 \u22123y+4 Step I \u00b6 Defining variable and function. x , y = sp . var ( 'x,y' , real = True ); f = x ** 4 - x ** 2 * y + y ** 2 - 3 * y + 4 display ( Math ( rf \"\"\" f = { sp . latex ( f ) } \"\"\" )) $\\displaystyle f = x^{4} - x^{2} y + y^{2} - 3 y + 4 $ Step II \u00b6 Finding gradiant of the function. gradf = [ sp . diff ( f , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) expr = \"\" for i in gradf : expr += sp . latex ( i ) + \"= 0 \\\\\\\\ \" display ( Math ( expr )) $\\displaystyle 4 x^{3} - 2 x y= 0 \\\\- x^{2} + 2 y - 3= 0 \\\\$ Step III \u00b6 Finding the criticlal points by setting the gradient equal to 0 . stationary_points = sp . solve ( gradf , [ x , y ], dict = True ) # solve the KKT equations stationary_points table = \"|$x$|$y$|Obj| \\n |---|---|---| \\n \" for i in stationary_points : table += \"|$\" + sp . latex ( i [ x ]) \\ + \"$|$\" + sp . latex ( i [ y ]) \\ + \"$|$\" + sp . latex ( f . subs ( i )) \\ + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ Obj $-1$ $2$ $1$ $0$ $\\frac{3}{2}$ $\\frac{7}{4}$ $1$ $2$ $1$ Step IV \u00b6 Computing the sign of the Hessian at each of the critical points. H = sp . hessian ( f , ( x , y )) display ( Math ( r \"H = \" + sp . latex ( H ))) $\\displaystyle H = \\left[\\begin{matrix}12 x^{2} - 2 y & - 2 x\\\\- 2 x & 2\\end{matrix}\\right]$ def sign ( A ): d = A . eigenvals () . keys () if any ( x >= 0 for x in d ): if any ( x <= 0 for x in d ): return \"None\" else : return \"Minima\" else : return \"Maxima\" table = \"|$x$|$y$|Obj|Hessian| \\n \" \\ + \"|---|---|---|------| \\n \" for i in stationary_points : table += \"|$\" + sp . latex ( i [ x ]) + \"$|$\" \\ + sp . latex ( i [ y ]) + \"$|$\" \\ + sp . latex ( f . subs ( i )) + \"$|\" \\ + sign ( H . subs ( i )) + \"| \\n \" display ( Markdown ( table )) $x$ $y$ Obj Hessian $-1$ $2$ $1$ Minima $0$ $\\frac{3}{2}$ $\\frac{7}{4}$ None $1$ $2$ $1$ Minima Conclusion: The points (-1,2) and (1,2) are the local minima(which is also global) of the given function.","title":"Unconstrained Optimization"},{"location":"nonlinear-programming/unconstrained-optimization/#step-i","text":"Defining variable and function. x , y = sp . var ( 'x,y' , real = True ); f = x ** 4 - x ** 2 * y + y ** 2 - 3 * y + 4 display ( Math ( rf \"\"\" f = { sp . latex ( f ) } \"\"\" )) $\\displaystyle f = x^{4} - x^{2} y + y^{2} - 3 y + 4 $","title":"Step I"},{"location":"nonlinear-programming/unconstrained-optimization/#step-ii","text":"Finding gradiant of the function. gradf = [ sp . diff ( f , c ) for c in [ x , y ]] # gradient of Lagrangian w.r.t. (x,y) expr = \"\" for i in gradf : expr += sp . latex ( i ) + \"= 0 \\\\\\\\ \" display ( Math ( expr )) $\\displaystyle 4 x^{3} - 2 x y= 0 \\\\- x^{2} + 2 y - 3= 0 \\\\$","title":"Step II"},{"location":"nonlinear-programming/unconstrained-optimization/#step-iii","text":"Finding the criticlal points by setting the gradient equal to 0 . stationary_points = sp . solve ( gradf , [ x , y ], dict = True ) # solve the KKT equations stationary_points table = \"|$x$|$y$|Obj| \\n |---|---|---| \\n \" for i in stationary_points : table += \"|$\" + sp . latex ( i [ x ]) \\ + \"$|$\" + sp . latex ( i [ y ]) \\ + \"$|$\" + sp . latex ( f . subs ( i )) \\ + \"$| \\n \" display ( Markdown ( table )) $x$ $y$ Obj $-1$ $2$ $1$ $0$ $\\frac{3}{2}$ $\\frac{7}{4}$ $1$ $2$ $1$","title":"Step III"},{"location":"nonlinear-programming/unconstrained-optimization/#step-iv","text":"Computing the sign of the Hessian at each of the critical points. H = sp . hessian ( f , ( x , y )) display ( Math ( r \"H = \" + sp . latex ( H ))) $\\displaystyle H = \\left[\\begin{matrix}12 x^{2} - 2 y & - 2 x\\\\- 2 x & 2\\end{matrix}\\right]$ def sign ( A ): d = A . eigenvals () . keys () if any ( x >= 0 for x in d ): if any ( x <= 0 for x in d ): return \"None\" else : return \"Minima\" else : return \"Maxima\" table = \"|$x$|$y$|Obj|Hessian| \\n \" \\ + \"|---|---|---|------| \\n \" for i in stationary_points : table += \"|$\" + sp . latex ( i [ x ]) + \"$|$\" \\ + sp . latex ( i [ y ]) + \"$|$\" \\ + sp . latex ( f . subs ( i )) + \"$|\" \\ + sign ( H . subs ( i )) + \"| \\n \" display ( Markdown ( table )) $x$ $y$ Obj Hessian $-1$ $2$ $1$ Minima $0$ $\\frac{3}{2}$ $\\frac{7}{4}$ None $1$ $2$ $1$ Minima Conclusion: The points (-1,2) and (1,2) are the local minima(which is also global) of the given function.","title":"Step IV"}]}